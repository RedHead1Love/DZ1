using System;
using System.Collections.Generic;
using System.Linq;

namespace TrainDispatcher
{
    public class Program
    {
        static void Main()
        {
            var application = new TrainDispatcherApplication();
            application.Run();
        }
    }

    public static class TrainConstants
    {
        public const int MinWagonCapacity = 10;
        public const int MaxWagonCapacity = 51;
        public const int MinPassengers = 50;
        public const int MaxPassengers = 201;
    }

    public static class UserUtils
    {
        private static readonly Random Random = new Random();

        public static int GenerateRandomNumber(int min, int max)
        {
            return Random.Next(min, max);
        }
    }

    public class TrainDispatcherApplication
    {
        const string CommandCreateNewTrain = "1";
        const string CommandExit = "2";


        private readonly Dispatcher _dispatcher = new Dispatcher();
        private bool _isRunning = true;

        public void Run()
        {
            while (_isRunning)
            {
                Console.Clear();
                _dispatcher.ShowAllTrains();
                ShowMenu();
                ProcessUserInput();
            }
        }

        private void ShowMenu()
        {
            Console.WriteLine("\nМеню:");
            Console.WriteLine($"{CommandCreateNewTrain}. Создать новый поезд");
            Console.WriteLine($"{CommandExit}. Завершить работу");
            Console.Write("Выберите действие: ");
        }

        private void ProcessUserInput()
        {
            string choice = Console.ReadLine();

            switch (choice)
            {
                case CommandCreateNewTrain:
                    if (!_dispatcher.CreateNewTrain())
                    {
                        Console.WriteLine("Не удалось создать поезд. Проверьте введенные данные.");
                    }
                    break;

                case CommandExit:
                    _isRunning = false;
                    Console.WriteLine("Работа завершена");
                    break;
                default:
                    Console.WriteLine("Некорректный ввод, попробуйте еще раз");
                    break;
            }

            if (_isRunning)
            {
                Console.WriteLine("\nНажмите любую клавишу для продолжения");
                Console.ReadKey();
            }
        }
    }

    public class Route
    {
        public string From { get; }
        public string To { get; }

        public Route(string from, string to)
        {
            if (string.IsNullOrWhiteSpace(from))
                throw new ArgumentException("Пункт отправления не может быть пустым");

            if (string.IsNullOrWhiteSpace(to))
                throw new ArgumentException("Пункт назначения не может быть пустым");

            if (string.Equals(from, to, StringComparison.OrdinalIgnoreCase))
                throw new ArgumentException("Пункт отправления и назначения не могут совпадать");

            From = from;
            To = to;
        }

        public override string ToString() => $"{From} - {To}";
    }

    public class Wagon
    {
        public int Capacity { get; }
        public int Passengers { get; }

        public Wagon(int capacity, int passengers)
        {
            if (capacity <= 0)
                throw new ArgumentException("Вместимость вагона должна быть положительной");

            Capacity = capacity;
            Passengers = Math.Min(passengers, capacity);
        }

        public override string ToString() =>
            $"Вагон (Вместимость: {Capacity}, Пассажиров: {Passengers})";
    }

    public class Train
    {
        public Route Route { get; }
        public int TotalPassengers { get; }
        public IReadOnlyList<Wagon> Wagons { get; }

        public Train(Route route, int passengers)
        {
            Route = route ?? throw new ArgumentNullException(nameof(route));

            if (passengers <= 0)
                throw new ArgumentException("Количество пассажиров должно быть положительным");

            TotalPassengers = passengers;
            Wagons = FormTrain(passengers);
        }

        private List<Wagon> FormTrain(int passengers)
        {
            var wagons = new List<Wagon>();
            int remainingPassengers = passengers;

            while (remainingPassengers > 0)
            {
                int capacity = UserUtils.GenerateRandomNumber(TrainConstants.MinWagonCapacity, TrainConstants.MaxWagonCapacity);
                int passengersInWagon = Math.Min(capacity, remainingPassengers);
                wagons.Add(new Wagon(capacity, passengersInWagon));
                remainingPassengers -= passengersInWagon;
            }

            return wagons;
        }

        public string GetShortInfo() =>
            $"[Поезд {Route}] Пассажиров: {TotalPassengers}, Вагонов: {Wagons.Count}";

        public string GetFullInfo()
        {
            var info = $"Поезд {Route}\n";
            info += $"Общее количество пассажиров: {TotalPassengers}\n";
            info += $"Количество вагонов: {Wagons.Count}\n";
            info += "Состав поезда:\n";

            return Wagons.Select((wagon, index) => $"{index + 1}. {wagon}")
                       .Aggregate(info, (current, wagonInfo) => current + (wagonInfo + "\n"));
        }
    }

    public class Dispatcher
    {
        private readonly List<Train> _trains = new List<Train>();

        public void ShowAllTrains()
        {
            Console.WriteLine("\nСписок всех поездов:");

            if (!_trains.Any())
            {
                Console.WriteLine("Поездов нет");
                return;
            }

            Console.WriteLine(string.Join("\n",
                _trains.Select((train, index) => $"{index + 1}. {train.GetShortInfo()}")));
        }

        public bool CreateNewTrain()
        {
            Console.WriteLine("\nСоздание нового поезда");

            var route = CreateRoute();
            if (route == null)
            {
                return false;
            }

            int passengers = UserUtils.GenerateRandomNumber(TrainConstants.MinPassengers, TrainConstants.MaxPassengers);
            Console.WriteLine($"Продано билетов: {passengers}");

            var train = new Train(route, passengers);
            _trains.Add(train);

            Console.WriteLine("\nПоезд успешно создан:");
            Console.WriteLine(train.GetFullInfo());
            return true;
        }

        private Route CreateRoute()
        {
            Console.Write("Введите пункт отправления: ");
            string from = Console.ReadLine()?.Trim();

            Console.Write("Введите пункт назначения: ");
            string to = Console.ReadLine()?.Trim();

            if (string.IsNullOrWhiteSpace(from) || string.IsNullOrWhiteSpace(to))
            {
                Console.WriteLine("Ошибка: оба пункта должны быть указаны");
                return null;
            }

            if (string.Equals(from, to, StringComparison.OrdinalIgnoreCase))
            {
                Console.WriteLine("Ошибка: пункты отправления и назначения не могут совпадать");
                return null;
            }

            return new Route(from, to);
        }
    }
}
