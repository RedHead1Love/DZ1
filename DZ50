using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        var app = new CarServiceApp();
        app.Run();
    }
}

class CarServiceApp
{
    private const string CommandShowBalance = "1";
    private const string CommandShowWarehouse = "2";
    private const string CommandRepairCar = "3";
    private const string CommandRefuseRepair = "4";
    private const string CommandExit = "5";

    private readonly CarService _carService;

    public CarServiceApp()
    {
        _carService = InitializeCarService();
    }

    public void Run()
    {
        while (_carService.HasCarsInQueue())
        {
            var currentCar = _carService.PeekNextCar();
            DisplayCarInfo(currentCar);
            HandleUserInput(currentCar);
        }

        Console.WriteLine("В очереди не осталось машин");
    }

    private CarService InitializeCarService()
    {
        var warehouse = new Warehouse();
        var partFactory = new PartFactory();

        int numberEnginesPlacedWarehouse = 2;
        int numberTransmissionsPlacedWarehouse = 3;
        int numberWheelsPlacedWarehouse = 10;
        int numberBatterysPlacedWarehouse = 5;

        var parts = partFactory.CreateAllParts();
        warehouse.AddPart(parts["Двигатель"], numberEnginesPlacedWarehouse);
        warehouse.AddPart(parts["Трансмиссия"], numberTransmissionsPlacedWarehouse);
        warehouse.AddPart(parts["Колесо"], numberWheelsPlacedWarehouse);
        warehouse.AddPart(parts["Батарея"], numberBatterysPlacedWarehouse);


        var cars = new List<Car>
        {
            new Car(new List<Part> { CreateBrokenPart(parts["Двигатель"]), CreateBrokenPart(parts["Колесо"]) }),
            new Car(new List<Part> { CreateBrokenPart(parts["Трансмиссия"]), CreateBrokenPart(parts["Батарея"]) })
        };

        return new CarService(1000, warehouse, cars);
    }

    private Part CreateBrokenPart(Part original)
    {
        var part = new Part(original.Name, original.Price, original.RepairCost);
        part.Break();

        return part;
    }

    private void DisplayCarInfo(Car car)
    {
        Console.WriteLine("\nТекущие сломанные детали автомобиля:");

        car.ShowBrokenParts();
        DisplayMenu();
    }

    private void DisplayMenu()
    {
        Console.WriteLine($"\n{CommandShowBalance}. Показать баланс");
        Console.WriteLine($"{CommandShowWarehouse}. Показать склад");
        Console.WriteLine($"{CommandRepairCar}. Ремонт следующей части");
        Console.WriteLine($"{CommandRefuseRepair}. Отказаться от ремонта");
        Console.WriteLine($"{CommandExit}. Выход из программы");
        Console.Write("Выбрать опцию: ");
    }

    private void HandleUserInput(Car currentCar)
    {
        string choice = Console.ReadLine();

        switch (choice)
        {
            case CommandShowBalance:
                _carService.DisplayBalance();
                break;

            case CommandShowWarehouse:
                _carService.ShowWarehouse();
                break;

            case CommandRepairCar:
                _carService.TryRepairCar(currentCar);
                break;

            case CommandRefuseRepair:
                _carService.RefuseRepair(currentCar);
                break;

            case CommandExit:
                Environment.Exit(0);
                break;

            default:
                Console.WriteLine("Неверный ввод");
                break;
        }
    }
}

class PartFactory
{
    public Dictionary<string, Part> CreateAllParts()
    {
        int enginePrice = 500;
        int transmissionPrice = 300;
        int wheelPrice = 100;
        int batteryPrice = 200;

        int engineRepairCost = 200;
        int transmissionRepairCost = 150;
        int wheelRepairCost = 50;
        int batteryRepairCost = 100;

        return new Dictionary<string, Part>
        {
            ["Двигатель"] = new Part("Двигатель", enginePrice, engineRepairCost),
            ["Трансмиссия"] = new Part("Трансмиссия", transmissionPrice, transmissionRepairCost),
            ["Колесо"] = new Part("Колесо", wheelPrice, wheelRepairCost),
            ["Батарея"] = new Part("Батарея", batteryPrice, batteryRepairCost)
        };
    }
}

class Part
{
    public Part(string name, int price, int repairCost)
    {
        Name = name;
        Price = price;
        RepairCost = repairCost;
        IsBroken = false;
    }

    public string Name { get; }
    public int Price { get; }
    public int RepairCost { get; }
    public bool IsBroken { get; private set; }

    public void Break()
    {
        IsBroken = true;
    }

    public void Repair()
    {
        IsBroken = false;
    }

    public override bool Equals(object objects)
    {
        return objects is Part part &&
               Name == part.Name &&
               Price == part.Price &&
               RepairCost == part.RepairCost;
    }

    public override int GetHashCode()
    {
        return (Name?.GetHashCode() ?? 0) ^ Price.GetHashCode() ^ RepairCost.GetHashCode();
    }
}

class Car
{
    private readonly List<Part> _parts;

    public Car(List<Part> parts)
    {
        if (parts == null || parts.Count == 0)
        {
            throw new ArgumentException("У автомобиля должна быть хотя бы одна деталь");
        }

        _parts = new List<Part>(parts);
        InitialBrokenPartsCount = parts.FindAll(p => p.IsBroken).Count;
    }

    public int InitialBrokenPartsCount { get; }
    public bool IsRepaired => !_parts.Exists(p => p.IsBroken);
    public int RemainingBrokenPartsCount => _parts.FindAll(p => p.IsBroken).Count;

    public void ShowBrokenParts()
    {
        foreach (var part in _parts)
        {
            if (part.IsBroken)
            {
                Console.WriteLine($"{part.Name} - Цена: {part.Price}, Цена ремонта: {part.RepairCost}");
            }
        }
    }

    public bool TryReplacePart(Part part)
    {
        var brokenPart = _parts.Find(p => p.Name == part.Name && p.IsBroken);

        if (brokenPart != null)
        {
            brokenPart.Repair();

            return true;
        }

        return false;
    }

    public List<Part> GetBrokenParts()
    {
        return _parts.FindAll(p => p.IsBroken);
    }
}

class WarehouseItem
{
    public WarehouseItem(Part part, int quantity)
    {
        Part = part;
        Quantity = quantity;
    }

    public Part Part { get; }
    public int Quantity { get; private set; }

    public void IncreaseQuantity(int amount)
    {
        Quantity += amount;
    }

    public void DecreaseQuantity()
    {
        if (Quantity > 0)
            Quantity--;
    }
}

class Warehouse
{
    private readonly List<WarehouseItem> _items = new List<WarehouseItem>();

    public void AddPart(Part part, int quantity)
    {
        var existingItem = _items.Find(i => i.Part.Name == part.Name);
        if (existingItem != null)
        {
            existingItem.IncreaseQuantity(quantity);
        }
        else
        {
            _items.Add(new WarehouseItem(part, quantity));
        }
    }

    public bool TryTakePart(Part part)
    {
        var item = _items.Find(i => i.Part.Name == part.Name && i.Quantity > 0);

        if (item != null)
        {
            item.DecreaseQuantity();

            return true;
        }

        return false;
    }

    public void DisplayParts()
    {
        foreach (var item in _items)
        {
            Console.WriteLine($"{item.Part.Name} - Стоимость: {item.Part.Price}, " +
                            $"Цена ремонта: {item.Part.RepairCost}, Количество: {item.Quantity}");
        }
    }

    public bool HasPart(Part part)
    {
        var item = _items.Find(i => i.Part.Name == part.Name);

        return item != null && item.Quantity > 0;
    }
}

class CarService
{
    private const int RefusalPenalty = 100;
    private const int PerPartPenalty = 50;

    private readonly Warehouse _warehouse;
    private readonly Queue<Car> _cars;

    public CarService(int initialBalance, Warehouse warehouse, List<Car> cars)
    {
        Balance = initialBalance;
        _warehouse = warehouse;
        _cars = new Queue<Car>(cars);
    }

    public int Balance { get; private set; }

    public bool HasCarsInQueue() => _cars.Count > 0;
    public Car PeekNextCar() => _cars.Peek();

    public void DisplayBalance()
    {
        Console.WriteLine($"Текущий баланс: {Balance}");
    }

    public void ShowWarehouse()
    {
        Console.WriteLine("\nСкладские запасные части:");
        _warehouse.DisplayParts();
    }

    public bool TryRepairCar(Car car)
    {
        if (car.IsRepaired)
        {
            Console.WriteLine("Машина не нуждается в ремонте");
            _cars.Dequeue();

            return true;
        }

        if (TryGetPartToRepairFromUser(car, out Part partToRepair) == false)
        {
            return false;
        }

        if (_warehouse.HasPart(partToRepair) == false)
        {
            Console.WriteLine("Деталь отсутствует на складе");

            return false;
        }

        PerformRepair(car, partToRepair);

        if (car.IsRepaired)
        {
            _cars.Dequeue();
            Console.WriteLine("Автомобиль успешно отремонтирован");
        }

        return true;
    }

    private bool TryGetPartToRepairFromUser(Car car, out Part partToRepair)
    {
        partToRepair = null;

        Console.Write("Введите название детали для ремонта: ");

        string partName = Console.ReadLine();

        foreach (var part in car.GetBrokenParts())
        {
            if (part.Name.Equals(partName, StringComparison.OrdinalIgnoreCase))
            {
                partToRepair = part;

                return true;
            }
        }

        Console.WriteLine("Деталь не найдена в автомобиле");

        return false;
    }

    private void PerformRepair(Car car, Part part)
    {
        _warehouse.TryTakePart(part);
        car.TryReplacePart(part);
        Balance += part.Price + part.RepairCost;

        Console.WriteLine("Деталь успешно заменена");
    }

    public void RefuseRepair(Car car)
    {
        if (car.IsRepaired)
        {
            Console.WriteLine("Ремонт уже завершен");

            return;
        }

        int penalty = CalculatePenalty(car);
        Balance -= penalty;
        _cars.Dequeue();

        Console.WriteLine($"Ремонт отклонен, применен штраф: {penalty}");
    }

    private int CalculatePenalty(Car car)
    {
        int penalty = RefusalPenalty;

        if (car.RemainingBrokenPartsCount < car.InitialBrokenPartsCount)
        {
            penalty += car.RemainingBrokenPartsCount * PerPartPenalty;
        }

        return penalty;
    }
}
