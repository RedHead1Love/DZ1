using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        var app = new CarServiceApp();
        app.Run();
    }
}

class CarServiceApp
{
    private const string CommandShowBalance = "1";
    private const string CommandShowWarehouse = "2";
    private const string CommandRepairCar = "3";
    private const string CommandRefuseRepair = "4";
    private const string CommandExit = "5";

    private readonly CarService _carService;
    private readonly Queue<Car> _cars;
    private readonly PartFactory _partFactory;

    public CarServiceApp()
    {
        _partFactory = new PartFactory();
        _carService = InitializeCarService();
        _cars = InitializeCars();
    }

    public void Run()
    {
        while (_cars.Count > 0)
        {
            var currentCar = _cars.Peek();
            DisplayCarInfo(currentCar);
            HandleUserInput(currentCar);
        }

        Console.WriteLine("В очереди не осталось машин");
    }

    private CarService InitializeCarService()
    {
        var warehouse = new Warehouse();

        warehouse.AddPart(_partFactory.CreateEngine(), 2);
        warehouse.AddPart(_partFactory.CreateTransmission(), 3);
        warehouse.AddPart(_partFactory.CreateWheel(), 10);
        warehouse.AddPart(_partFactory.CreateBattery(), 5);

        return new CarService(1000, warehouse);
    }

    private Queue<Car> InitializeCars()
    {
        var cars = new Queue<Car>();

        cars.Enqueue(new Car(new List<Part>
        {
            _partFactory.CreateEngine(),
            _partFactory.CreateWheel()
        }));

        cars.Enqueue(new Car(new List<Part>
        {
            _partFactory.CreateTransmission(),
            _partFactory.CreateBattery()
        }));

        return cars;
    }

    private void DisplayCarInfo(Car car)
    {
        Console.WriteLine("\nТекущие сломанные детали автомобиля:");

        car.ShowBrokenParts();
        DisplayMenu();
    }

    private void DisplayMenu()
    {
        Console.WriteLine($"\n{CommandShowBalance}. Показать баланс");
        Console.WriteLine($"{CommandShowWarehouse}. Показать склад");
        Console.WriteLine($"{CommandRepairCar}. Ремонт следующей части");
        Console.WriteLine($"{CommandRefuseRepair}. Отказаться от ремонта");
        Console.WriteLine($"{CommandExit}. Выход из программы");
        Console.Write("Выбрать опцию: ");
    }

    private void HandleUserInput(Car currentCar)
    {
        string choice = Console.ReadLine();

        switch (choice)
        {
            case CommandShowBalance:
                DisplayBalance();
                break;

            case CommandShowWarehouse:
                DisplayWarehouse();
                break;

            case CommandRepairCar:
                HandleRepair(currentCar);
                break;

            case CommandRefuseRepair:
                HandleRefusal(currentCar);
                break;

            case CommandExit:
                Environment.Exit(0);
                break;

            default:
                Console.WriteLine("Неверный ввод");
                break;
        }
    }

    private void DisplayBalance()
    {
        Console.WriteLine($"Текущий баланс: {_carService.Balance}");
    }

    private void DisplayWarehouse()
    {
        _carService.ShowWarehouse();
    }

    private void HandleRepair(Car currentCar)
    {
        bool repairSuccessful = _carService.TryRepairCar(currentCar);

        if (repairSuccessful && currentCar.IsRepaired)
        {
            _cars.Dequeue();

            Console.WriteLine("Автомобиль успешно отремонтирован");
        }
    }

    private void HandleRefusal(Car currentCar)
    {
        _carService.RefuseRepair(currentCar);
        _cars.Dequeue();
    }
}

class PartFactory
{
    public Part CreateEngine()
    {
        return new Part("Двигатель", 500, 200);
    }

    public Part CreateTransmission()
    {
        return new Part("Трансмиссия", 300, 150);
    }

    public Part CreateWheel()
    {
        return new Part("Колесо", 100, 50);
    }

    public Part CreateBattery()
    {
        return new Part("Батарея", 200, 100);
    }
}

class Part
{
    public Part(string name, int price, int repairCost)
    {
        Name = name;
        Price = price;
        RepairCost = repairCost;
        IsBroken = true;
    }

    public string Name { get; }
    public int Price { get; }
    public int RepairCost { get; }
    public bool IsBroken { get; private set; }

    public void ReplaceWithNew()
    {
        IsBroken = false;
    }

    public override bool Equals(object objects)
    {
        if (objects == null || GetType() != objects.GetType())
        {
            return false;
        }

        Part other = (Part)objects;

        return Name == other.Name &&
               Price == other.Price &&
               RepairCost == other.RepairCost;
    }

    public override int GetHashCode()
    {
        int multiplierForCombiningFields = 23;

        unchecked
        {
            int initialHashValue = 17;
            initialHashValue = initialHashValue * multiplierForCombiningFields + (Name?.GetHashCode() ?? 0);
            initialHashValue = initialHashValue * multiplierForCombiningFields + Price.GetHashCode();
            initialHashValue = initialHashValue * multiplierForCombiningFields + RepairCost.GetHashCode();

            return initialHashValue;
        }
    }
}

class Car
{
    private readonly List<Part> _brokenParts;

    public Car(List<Part> brokenParts)
    {
        if (brokenParts == null || brokenParts.Count == 0)
        {
            throw new ArgumentException("У автомобиля должна быть хотя бы одна сломанная деталь");
        }

        _brokenParts = new List<Part>(brokenParts);
        InitialBrokenPartsCount = brokenParts.Count;
    }

    public int InitialBrokenPartsCount { get; }
    public bool IsRepaired => _brokenParts.Count == 0;
    public int RemainingBrokenPartsCount => _brokenParts.Count;

    public void ShowBrokenParts()
    {
        foreach (var part in _brokenParts)
        {
            Console.WriteLine($"{part.Name} - Цена: {part.Price}, Цена ремонта: {part.RepairCost}");
        }
    }

    public bool TryReplacePart(Part part)
    {
        if (_brokenParts.Remove(part))
        {
            part.ReplaceWithNew();
            return true;
        }

        return false;
    }

    public List<Part> GetBrokenParts()
    {
        return new List<Part>(_brokenParts);
    }
}

class Warehouse
{
    private readonly Dictionary<Part, int> _parts = new Dictionary<Part, int>();

    public void AddPart(Part part, int quantity)
    {
        if (_parts.ContainsKey(part))
        {
            _parts[part] += quantity;
        }
        else
        {
            _parts[part] = quantity;
        }
    }

    public bool TryTakePart(Part part)
    {
        if (_parts.ContainsKey(part) && _parts[part] > 0)
        {
            _parts[part]--;
            return true;
        }

        return false;
    }

    public void DisplayParts()
    {
        foreach (var partEntry in _parts)
        {
            Console.WriteLine($"{partEntry.Key.Name} - Стоимость: {partEntry.Key.Price}, " +
                             $"Цена ремонта: {partEntry.Key.RepairCost}, Количество: {partEntry.Value}");
        }
    }

    public bool HasPart(Part part)
    {
        return _parts.ContainsKey(part) && _parts[part] > 0;
    }
}

class CarService
{
    private const int RefusalPenalty = 100;
    private const int PerPartPenalty = 50;

    private readonly Warehouse _warehouse;

    public CarService(int initialBalance, Warehouse warehouse)
    {
        Balance = initialBalance;
        _warehouse = warehouse;
    }

    public int Balance { get; private set; }

    public void ShowWarehouse()
    {
        Console.WriteLine("\nСкладские запасные части:");

        _warehouse.DisplayParts();
    }

    public bool TryRepairCar(Car car)
    {
        if (car.IsRepaired)
        {
            Console.WriteLine("Машина не нуждается в ремонте");

            return true;
        }

        if (TryGetPartToRepairFromUser(car, out Part partToRepair) == false)
        {
            return false;
        }

        if (_warehouse.HasPart(partToRepair) == false)
        {
            Console.WriteLine("Деталь отсутствует на складе");

            return false;
        }

        PerformRepair(car, partToRepair);

        return true;
    }

    private bool TryGetPartToRepairFromUser(Car car, out Part partToRepair)
    {
        partToRepair = null;

        Console.Write("Введите название детали для ремонта: ");

        string partName = Console.ReadLine();

        foreach (var part in car.GetBrokenParts())
        {
            if (part.Name.Equals(partName, StringComparison.OrdinalIgnoreCase))
            {
                partToRepair = part;

                return true;
            }
        }

        Console.WriteLine("Деталь не найдена в автомобиле");

        return false;
    }

    private void PerformRepair(Car car, Part part)
    {
        _warehouse.TryTakePart(part);
        car.TryReplacePart(part);
        Balance += part.Price + part.RepairCost;

        Console.WriteLine("Деталь успешно заменена");
    }

    public void RefuseRepair(Car car)
    {
        if (car.IsRepaired)
        {
            Console.WriteLine("Ремонт уже завершен");

            return;
        }

        int penalty = CalculatePenalty(car);
        Balance -= penalty;

        Console.WriteLine($"Ремонт отклонен, применен штраф: {penalty}");
    }

    private int CalculatePenalty(Car car)
    {
        int penalty = RefusalPenalty;

        if (car.RemainingBrokenPartsCount < car.InitialBrokenPartsCount)
        {
            penalty += car.RemainingBrokenPartsCount * PerPartPenalty;
        }

        return penalty;
    }
}
