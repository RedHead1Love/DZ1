using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        CarServiceProgram carServiceProgram = new CarServiceProgram();
        carServiceProgram.Start();
    }
}

class CarServiceProgram
{
    private const string CommandShowBalance = "1";
    private const string CommandShowWarehouse = "2";
    private const string CommandRepairCar = "3";
    private const string CommandRefuseRepair = "4";
    private const string CommandExit = "5";

    private CarService _carService;
    private Queue<Car> _cars;

    public void Start()
    {
        Initialize();
        ProcessCars();
        Console.WriteLine("В очереди не осталось машин");
    }

    private void Initialize()
    {
        int enginePartPrice = 500;
        int engineRepairCost = 200;
        int transmissionPartPrice = 300;
        int transmissionRepairCost = 150;
        int wheelPartPrice = 100;
        int wheelRepairCost = 50;
        int batteryPartPrice = 200;
        int batteryRepairCost = 100;

        var warehouse = new Warehouse();
        warehouse.AddPart(new Part("Двигатель", enginePartPrice, engineRepairCost), 2);
        warehouse.AddPart(new Part("Трансмиссия", transmissionPartPrice, transmissionRepairCost), 3);
        warehouse.AddPart(new Part("Колесо", wheelPartPrice, wheelRepairCost), 10);
        warehouse.AddPart(new Part("Батарея", batteryPartPrice, batteryRepairCost), 5);

        _carService = new CarService(1000, warehouse);

        _cars = new Queue<Car>();
        _cars.Enqueue(new Car(new List<Part>
        {
            new Part("Двигатель", enginePartPrice, engineRepairCost),
            new Part("Колесо", wheelPartPrice, wheelRepairCost)
        }));
        _cars.Enqueue(new Car(new List<Part>
        {
            new Part("Трансмиссия", transmissionPartPrice, transmissionRepairCost),
            new Part("Батарея", batteryPartPrice, batteryRepairCost)
        }));
    }

    private void ProcessCars()
    {
        while (_cars.Count > 0)
        {
            Car currentCar = _cars.Peek();
            ShowCarInfo(currentCar);
            ProcessUserChoice(currentCar);
        }
    }

    private void ShowCarInfo(Car car)
    {
        Console.WriteLine("\nТекущие сломанные детали автомобиля:");
        car.ShowBrokenParts();
        ShowMenu();
    }

    private void ShowMenu()
    {
        Console.WriteLine($"\n{CommandShowBalance}. Показать баланс");
        Console.WriteLine($"{CommandShowWarehouse}. Показать склад");
        Console.WriteLine($"{CommandRepairCar}. Ремонт следующей части");
        Console.WriteLine($"{CommandRefuseRepair}. Отказаться от ремонта");
        Console.WriteLine($"{CommandExit}. Выход из программы");
        Console.Write("Выбрать опцию: ");
    }

    private void ProcessUserChoice(Car currentCar)
    {
        string choice = Console.ReadLine();

        switch (choice)
        {
            case CommandShowBalance:
                ShowBalance();
                break;
            case CommandShowWarehouse:
                ShowWarehouse();
                break;
            case CommandRepairCar:
                RepairCar(currentCar);
                break;
            case CommandRefuseRepair:
                RefuseRepair(currentCar);
                break;
            case CommandExit:
                Environment.Exit(0);
                break;
            default:
                Console.WriteLine("Неверный ввод");
                break;
        }
    }

    private void ShowBalance()
    {
        Console.WriteLine($"Текущий баланс: {_carService.Balance}");
    }

    private void ShowWarehouse()
    {
        _carService.ShowWarehouse();
    }

    private void RepairCar(Car currentCar)
    {
        bool repairResult = _carService.RepairCar(currentCar);

        if (repairResult && currentCar.IsRepaired)
        {
            _cars.Dequeue();
            Console.WriteLine("Автомобиль успешно отремонтирован");
        }
    }

    private void RefuseRepair(Car currentCar)
    {
        _carService.RefuseRepair(currentCar);
        _cars.Dequeue();
    }
}

class Part
{
    public string Name { get; }
    public int Price { get; }
    public int RepairCost { get; }
    public bool IsBroken { get; private set; }

    public Part(string name, int price, int repairCost)
    {
        Name = name;
        Price = price;
        RepairCost = repairCost;
        IsBroken = true;
    }

    public void Replace()
    {
        IsBroken = false;
    }

    public override bool Equals(object obj)
    {
        if (obj == null || GetType() != obj.GetType())
            return false;

        Part other = (Part)obj;
        return Name == other.Name &&
               Price == other.Price &&
               RepairCost == other.RepairCost;
    }

    public override int GetHashCode()
    {
        int multiplierForCombiningFields = 23;
        unchecked
        {
            int initialHashValue = 17;
            initialHashValue = initialHashValue * multiplierForCombiningFields + (Name?.GetHashCode() ?? 0);
            initialHashValue = initialHashValue * multiplierForCombiningFields + Price.GetHashCode();
            initialHashValue = initialHashValue * multiplierForCombiningFields + RepairCost.GetHashCode();
            return initialHashValue;
        }
    }
}

class Car
{
    private readonly List<Part> _brokenParts;
    public int InitialBrokenPartsCount { get; }
    public bool IsRepaired => _brokenParts.Count == 0;
    public int RemainingBrokenPartsCount => _brokenParts.Count;

    public Car(List<Part> brokenParts)
    {
        if (brokenParts == null || brokenParts.Count == 0)
            throw new ArgumentException("У автомобиля должна быть хотя бы одна сломанная деталь");

        _brokenParts = new List<Part>(brokenParts);
        InitialBrokenPartsCount = brokenParts.Count;
    }

    public void ShowBrokenParts()
    {
        foreach (var part in _brokenParts)
        {
            Console.WriteLine($"{part.Name} - Цена: {part.Price}, Цена ремонта: {part.RepairCost}");
        }
    }

    public bool RepairPart(Part part)
    {
        if (_brokenParts.Remove(part))
        {
            part.Replace();
            return true;
        }
        return false;
    }

    public List<Part> GetBrokenParts()
    {
        return new List<Part>(_brokenParts);
    }
}

class Warehouse
{
    private readonly Dictionary<Part, int> _parts = new Dictionary<Part, int>();

    public void AddPart(Part part, int quantity)
    {
        if (_parts.ContainsKey(part))
        {
            _parts[part] += quantity;
        }
        else
        {
            _parts[part] = quantity;
        }
    }

    public bool TryGetPart(Part part)
    {
        if (_parts.ContainsKey(part) && _parts[part] > 0)
        {
            _parts[part]--;
            return true;
        }
        return false;
    }

    public void ShowParts()
    {
        foreach (var item in _parts)
        {
            Console.WriteLine($"{item.Key.Name} - Стоимость: {item.Key.Price}, Цена ремонта: {item.Key.RepairCost}, Количество: {item.Value}");
        }
    }

    public bool HasPart(Part part)
    {
        return _parts.ContainsKey(part) && _parts[part] > 0;
    }
}

class CarService
{
    private const int RefusalPenalty = 100;
    private const int PerPartPenalty = 50;

    private readonly Warehouse _warehouse;

    public int Balance { get; private set; }

    public CarService(int initialBalance, Warehouse warehouse)
    {
        Balance = initialBalance;
        _warehouse = warehouse;
    }

    public void ShowWarehouse()
    {
        Console.WriteLine("\nСкладские запасные части:");
        _warehouse.ShowParts();
    }

    public bool RepairCar(Car car)
    {
        if (car.IsRepaired)
        {
            Console.WriteLine("Машина не нуждается в ремонте");
            return true;
        }

        Part partToRepair = GetPartToRepairFromUser(car);
        if (partToRepair == null) return false;

        if (_warehouse.HasPart(partToRepair) == false)
        {
            Console.WriteLine("Деталь отсутствует на складе");
            return false;
        }

        return ProcessRepair(car, partToRepair);
    }

    private Part GetPartToRepairFromUser(Car car)
    {
        Console.Write("Введите название детали для ремонта: ");

        string partName = Console.ReadLine();

        foreach (var part in car.GetBrokenParts())
        {
            if (part.Name.Equals(partName, StringComparison.OrdinalIgnoreCase))
            {
                return part;
            }
        }

        Console.WriteLine("Деталь не найдена в автомобиле");

        return null;
    }

    private bool ProcessRepair(Car car, Part part)
    {
        _warehouse.TryGetPart(part);
        car.RepairPart(part);
        Balance += part.Price + part.RepairCost;
        Console.WriteLine("Деталь успешно заменена");

        return true;
    }

    public void RefuseRepair(Car car)
    {
        if (car.IsRepaired)
        {
            Console.WriteLine("Ремонт уже завершен");
            return;
        }

        int penalty = CalculatePenalty(car);
        Balance -= penalty;

        Console.WriteLine($"Ремонт отклонен, применен штраф: {penalty}");
    }

    private int CalculatePenalty(Car car)
    {
        int penalty = RefusalPenalty;

        if (car.RemainingBrokenPartsCount < car.InitialBrokenPartsCount)
        {
            penalty += car.RemainingBrokenPartsCount * PerPartPenalty;
        }
        return penalty;
    }
}
