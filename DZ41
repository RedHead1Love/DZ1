using System;
using System.Collections.Generic;
using System.Linq;

namespace SupermarketAdministration
{
    public static class UserUtils
    {
        private static readonly Random Random = new Random();

        public static int GenerateRandomNumber(int min, int max)
        {
            return Random.Next(min, max);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            SupermarketManager manager = new SupermarketManager();
            manager.Run();
        }
    }

    public class SupermarketManager
    {
        private readonly Supermarket _supermarket;

        public SupermarketManager()
        {
            List<Product> availableProducts = new List<Product>
            {
                new Product("Хлеб", 50),
                new Product("Молоко", 80),
                new Product("Яйца", 120),
                new Product("Сахар", 60),
                new Product("Масло", 150)
            };

            _supermarket = new Supermarket(availableProducts);
        }

        public void Run()
        {
            const string CommandMenuOptionShowProducts = "1";
            const string CommandMenuOptionAddClient = "2";
            const string CommandMenuOptionServeClient = "3";
            const string CommandMenuOptionShowEarnings = "4";
            const string CommandMenuOptionExit = "5";

            bool isRun = true;

            while (isRun)
            {
                Console.WriteLine("\nМеню управления супермаркетом:");
                Console.WriteLine($"{CommandMenuOptionShowProducts}. Показать список продуктов");
                Console.WriteLine($"{CommandMenuOptionAddClient}. Добавить клиента");
                Console.WriteLine($"{CommandMenuOptionServeClient}. Обслужить клиента");
                Console.WriteLine($"{CommandMenuOptionShowEarnings}. Показать доход");
                Console.WriteLine($"{CommandMenuOptionExit}. Выход из программы");

                Console.Write("Выберите действие: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case CommandMenuOptionShowProducts:
                        _supermarket.ShowProducts();
                        break;

                    case CommandMenuOptionAddClient:
                        AddClient();
                        break;

                    case CommandMenuOptionServeClient:
                        _supermarket.ServeNextClient();
                        break;

                    case CommandMenuOptionShowEarnings:
                        Console.WriteLine($"\nОбщий доход: {_supermarket.EarnedMoney} руб.");
                        break;

                    case CommandMenuOptionExit:
                        isRun = false;
                        break;

                    default:
                        Console.WriteLine("Неверный выбор, попробуйте снова.");
                        break;
                }
            }
        }

        private void AddClient()
        {
            Console.Write("Введите имя клиента: ");
            string name = Console.ReadLine();

            Console.Write("Введите количество денег у клиента: ");

            if (decimal.TryParse(Console.ReadLine(), out decimal money) == false)
            {
                Console.WriteLine("Некорректная сумма денег.");
                return;
            }

            Client client = new Client(name, money);
            ManageClientShopping(client);

            _supermarket.AddClient(client);
            Console.WriteLine($"Клиент {name} добавлен в очередь.");
        }

        private void ManageClientShopping(Client client)
        {
            const string CommandAddProductToCart = "1";
            const string CommandRemoveProductFromCart = "2";
            const string CommandFinishShopping = "3";

            bool isShop = true;

            while (isShop)
            {
                Console.WriteLine($"\nТекущий баланс: {client.Money} руб.");
                client.ShowCart();

                Console.WriteLine("\nМеню покупок:");
                Console.WriteLine($"{CommandAddProductToCart}. Добавить товар в корзину");
                Console.WriteLine($"{CommandRemoveProductFromCart}. Удалить товар из корзины");
                Console.WriteLine($"{CommandFinishShopping}. Завершить покупки");

                Console.Write("Выберите действие: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case CommandAddProductToCart:
                        AddProductToClientCart(client);
                        break;

                    case CommandRemoveProductFromCart:
                        RemoveProductFromClientCart(client);
                        break;

                    case CommandFinishShopping:
                        isShop = false;
                        break;

                    default:
                        Console.WriteLine("Неверный выбор, попробуйте снова.");
                        break;
                }
            }
        }

        private void AddProductToClientCart(Client client)
        {
            _supermarket.ShowProducts();
            Console.Write("Введите номер товара: ");

            if (int.TryParse(Console.ReadLine(), out int productNumber) == false)
            {
                Console.WriteLine("Некорректный номер товара.");
                return;
            }

            Product product = _supermarket.GetProductByIndex(productNumber - 1);

            if (product != null)
            {
                client.AddToCart(product);
                Console.WriteLine($"Товар {product.Name} добавлен в корзину.");
            }
            else
            {
                Console.WriteLine("Товар с таким номером не найден.");
            }
        }

        private void RemoveProductFromClientCart(Client client)
        {
            if (client.ShoppingCartCount == 0)
            {
                Console.WriteLine("Корзина пуста");
                return;
            }

            client.ShowCart();
            Console.Write("Введите номер товара для удаления: ");

            if (int.TryParse(Console.ReadLine(), out int productNumber) == false)
            {
                Console.WriteLine("Некорректный номер товара.");
                return;
            }

            if (client.RemoveFromCart(productNumber - 1))
            {
                Console.WriteLine("Товар удален из корзины.");
            }
            else
            {
                Console.WriteLine("Не удалось удалить товар.");
            }
        }
    }

    public class Product
    {
        public Product(string name, decimal price)
        {
            Name = name;
            Price = price;
        }

        public string Name { get; }
        public decimal Price { get; }
    }

    public class Client
    {
        private readonly List<Product> _shoppingCart;

        public Client(string name, decimal money)
        {
            Name = name;
            Money = money;
            _shoppingCart = new List<Product>();
        }

        public string Name { get; }
        public decimal Money { get; private set; }
        public int ShoppingCartCount => _shoppingCart.Count;

        public void AddToCart(Product product)
        {
            _shoppingCart.Add(product);
        }

        public bool RemoveFromCart(int index)
        {
            if (index >= 0 && index < _shoppingCart.Count)
            {
                _shoppingCart.RemoveAt(index);
                return true;
            }

            return false;
        }

        public void ShowCart()
        {
            Console.WriteLine("Товары в корзине:");

            if (_shoppingCart.Count == 0)
            {
                Console.WriteLine("Корзина пуста");
                return;
            }

            for (int i = 0; i < _shoppingCart.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {_shoppingCart[i].Name} - {_shoppingCart[i].Price} рублей");
            }

            Console.WriteLine($"Итого: {GetCartTotal()} рублей");
        }

        public decimal GetCartTotal()
        {
            return _shoppingCart.Sum(product => product.Price);
        }

        public bool CanPay(decimal amount)
        {
            return Money >= amount;
        }

        public void RemoveRandomProductFromCart()
        {
            if (_shoppingCart.Count == 0)
                return;

            int index = UserUtils.GenerateRandomNumber(0, _shoppingCart.Count);
            _shoppingCart.RemoveAt(index);
        }

        public void CompletePurchase(decimal amount)
        {
            if (CanPay(amount))
            {
                Money -= amount;
                _shoppingCart.Clear();
            }
        }
    }

    public class Supermarket
    {
        private readonly List<Product> _products;
        private readonly Queue<Client> _clients;

        public Supermarket(IEnumerable<Product> products)
        {
            _products = products.ToList();
            _clients = new Queue<Client>();
            EarnedMoney = 0;
        }

        public decimal EarnedMoney { get; private set; }
        public int ClientsCount => _clients.Count;

        public void AddClient(Client client)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client));

            _clients.Enqueue(client);
        }

        public void ServeNextClient()
        {
            if (_clients.Count == 0)
            {
                Console.WriteLine("Нет клиентов в очереди.");
                return;
            }

            Client currentClient = _clients.Dequeue();
            ProcessClientPurchase(currentClient);
            Console.WriteLine("Клиент обслужен.");
        }

        public void ShowProducts()
        {
            Console.WriteLine("\nДоступные товары:");

            for (int i = 0; i < _products.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {_products[i].Name} - {_products[i].Price} руб.");
            }
        }

        public Product GetProductByIndex(int index)
        {
            if (index >= 0 && index < _products.Count)
            {
                return _products[index];
            }

            return null;
        }

        private void ProcessClientPurchase(Client client)
        {
            decimal totalAmount = client.GetCartTotal();

            while (client.CanPay(totalAmount) == false && client.ShoppingCartCount > 0)
            {
                Console.WriteLine($"У клиента {client.Name} недостаточно денег (нужно {totalAmount} руб., есть {client.Money} руб.)");
                Console.WriteLine("Удаляем случайный товар из корзины");

                client.RemoveRandomProductFromCart();
                totalAmount = client.GetCartTotal();
            }

            if (client.ShoppingCartCount > 0)
            {
                client.CompletePurchase(totalAmount);
                EarnedMoney += totalAmount;
                Console.WriteLine($"Клиент {client.Name} оплатил покупку на сумму {totalAmount} руб.");
            }
            else
            {
                Console.WriteLine($"Клиент {client.Name} не смог оплатить ни один товар.");
            }
        }
    }
}
