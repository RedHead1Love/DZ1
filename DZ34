using System;
using System.Collections.Generic;

public class Product
{
    public Product(string name, decimal price)
    {
        Name = name;
        Price = price;
    }

    public string Name { get; private set; }
    public decimal Price { get; private set; }
}

public class Person
{
    public Person(string name, decimal money)
    {
        Name = name;
        Money = money;
        Items = new List<Product>();
    }

    public string Name { get; private set; }
    public decimal Money { get; protected set; }
    public List<Product> Items { get; private set; }

    public void AddItems(List<Product> products)
    {
        Items.AddRange(products);
    }

    public void ShowInfo()
    {
        Console.WriteLine($"Имя: {Name}");
        Console.WriteLine($"Деньги: {Money} руб.");
        Console.WriteLine("Товары: " + (Items.Count > 0 ? string.Join(", ", Items.ConvertAll(item => item.Name)) : "нет"));
    }

    protected void AddMoney(decimal amount)
    {
        Money += amount;
    }
}

public class Seller : Person
{
    public Seller(string name, decimal money, List<Product> products) : base(name, money)
    {
        AddItems(products);
    }

    public void ShowProducts()
    {
        Console.WriteLine($"\n{Name} предлагает товары:");

        if (Items.Count == 0)
            Console.WriteLine("Товаров нет");
        else
            Console.WriteLine(string.Join(", ", Items.ConvertAll(item => $"{item.Name} ({item.Price} рублей)")));
    }

    public bool TrySellProduct(string productName, out Product product)
    {
        product = Items.Find(p => p.Name.Equals(productName, StringComparison.OrdinalIgnoreCase));

        if (product == null)
        {
            Console.WriteLine($"У {Name} нет товара '{productName}'");
            return false;
        }

        Items.Remove(product);
        return true;
    }

    public void ReceivePayment(decimal amount)
    {
        AddMoney(amount);
    }
}

public class Buyer : Person
{
    public Buyer(string name, decimal money) : base(name, money) { }

    public bool TryBuyProduct(Product product)
    {
        if (Money < product.Price)
        {
            Console.WriteLine($"У {Name} недостаточно денег для покупки {product.Name}");
            return false;
        }

        Money -= product.Price;
        Items.Add(product);
        return true;
    }
}

public class Shop
{
    const string CommandShowAllProductsSeller = "1";
    const string CommandBuyProducts = "2";
    const string CommandShowInformationOnSeller = "3";
    const string CommandShowInformationOnBuyer = "4";
    const string CommandExit = "0";

    public Shop(Seller seller)
    {
        _seller = seller;
    }

    private readonly Seller _seller;
    private bool _isWorking;

    public void StartTrade(Buyer buyer)
    {
        _isWorking = true;

        while (_isWorking)
        {
            ShowMenu();
            ProcessInput(buyer);
        }
    }

    private void ShowMenu()
    {
        Console.WriteLine("\n=== Магазин ===");
        Console.WriteLine($"{CommandShowAllProductsSeller} - Показать товары продавца");
        Console.WriteLine($"{CommandBuyProducts} - Купить товар");
        Console.WriteLine($"{CommandShowInformationOnSeller} - Показать информацию о покупателе");
        Console.WriteLine($"{CommandShowInformationOnBuyer} - Показать информацию о продавце");
        Console.WriteLine($"{CommandExit} - Выход");
    }

    private void ProcessInput(Buyer buyer)
    {
        Console.Write("\nВыберите действие: ");
        string input = Console.ReadLine();

        switch (input)
        {
            case CommandShowAllProductsSeller:
                _seller.ShowProducts();
                break;

            case CommandBuyProducts:
                ProcessPurchase(buyer);
                break;

            case CommandShowInformationOnSeller:
                Console.WriteLine("\nИнформация о покупателе:");
                buyer.ShowInfo();
                break;

            case CommandShowInformationOnBuyer:
                Console.WriteLine("\nИнформация о продавце:");
                _seller.ShowInfo();
                break;

            case CommandExit:
                _isWorking = false;
                break;

            default:
                Console.WriteLine("Неизвестная команда");
                break;
        }
    }

    private void ProcessPurchase(Buyer buyer)
    {
        Console.Write("Введите название товара: ");
        string productName = Console.ReadLine();

        if (_seller.TrySellProduct(productName, out Product product))
        {
            if (buyer.TryBuyProduct(product))
            {
                _seller.ReceivePayment(product.Price);
                Console.WriteLine($"{_seller.Name} продал '{product.Name}' {buyer.Name} за {product.Price} рублей");
            }
            else
            {
                _seller.Items.Add(product); 
            }
        }
    }
}

class Program
{
    static void Main()
    {
        int buyerBalance = 50;
        int sellerBalance = 100;

        int applePrice = 5;
        int breadPrice = 10;
        int milkPrice = 15;
        int cheesePrice = 20;

        var products = new List<Product>
        {
            new Product("Яблоко", applePrice),
            new Product("Хлеб", breadPrice),
            new Product("Молоко", milkPrice),
            new Product("Сыр", cheesePrice)
        };

        var seller = new Seller("Иван", sellerBalance, products);
        var buyer = new Buyer("Алексей", buyerBalance);
        var shop = new Shop(seller);

        shop.StartTrade(buyer);
    }
}
