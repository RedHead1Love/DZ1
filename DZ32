using System;
using System.Collections.Generic;
using System.Linq;

class Book
{
    public Book(string title, string author, int year, string genre = "", int pages = 0)
    {
        Title = title;
        Author = author;
        Year = year;
        Genre = genre;
        Pages = pages;
    }

    public string Title { get; private set; }
    public string Author { get; private set; }
    public int Year { get; private set; }
    public string Genre { get; private set; }
    public int Pages { get; private set; }

    public void Update(string title, string author, int year, string genre, int pages)
    {
        Title = title;
        Author = author;
        Year = year;
        Genre = genre;
        Pages = pages;
    }

    public override string ToString()
    {
        return $"{Title} — {Author} ({Year}) {(!string.IsNullOrEmpty(Genre) ? $"| Жанр: {Genre}" : "")} {(Pages > 0 ? $"| Страницы: {Pages}" : "")}";
    }
}

class BookStorage
{
    private List<Book> _books = new List<Book>();

    public int BookCount => _books.Count;

    public void AddBook(Book book)
    {
        _books.Add(book);
        Console.WriteLine($"Книга '{book.Title}' добавлена в хранилище.");
    }

    public void RemoveBook(int index)
    {
        if (index >= 0 && index < _books.Count)
        {
            string title = _books[index].Title;
            _books.RemoveAt(index);
            Console.WriteLine($"Книга '{title}' удалена из хранилища.");
        }
        else
        {
            Console.WriteLine("Указан неверный номер книги.");
        }
    }

    public void DisplayAllBooks()
    {
        if (_books.Count == 0)
        {
            Console.WriteLine("В хранилище нет книг.");
            return;
        }

        Console.WriteLine("\nВсе книги в хранилище:");
        for (int i = 0; i < _books.Count; i++)
        {
            Console.WriteLine($"{i + 1}. {_books[i]}");
        }
    }

    public void SearchBooks(string searchType, string searchValue)
    {
        const string CommandSearchByName = "название";
        const string CommandSearchByAuthor = "автор";
        const string CommandSearchByYear = "год";
        const string CommandSearchByGenre = "жанр";

        List<Book> foundBooks = new List<Book>();

        switch (searchType.ToLower())
        {
            case CommandSearchByName:
                foundBooks = SearchByTitle(searchValue);
                break;

            case CommandSearchByAuthor:
                foundBooks = SearchByAuthor(searchValue);
                break;

            case CommandSearchByYear:
                foundBooks = SearchByYear(searchValue);
                break;

            case CommandSearchByGenre:
                foundBooks = SearchByGenre(searchValue);
                break;

            default:
                Console.WriteLine($"Неизвестный тип поиска. Доступно: {CommandSearchByName}, {CommandSearchByAuthor}, {CommandSearchByYear}, {CommandSearchByGenre}");
                return;
        }

        DisplaySearchResults(foundBooks, searchType, searchValue);
    }

    private List<Book> SearchByTitle(string title)
    {
        return _books.Where(book => book.Title.Equals(title, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private List<Book> SearchByAuthor(string author)
    {
        return _books.Where(book => book.Author.Equals(author, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private List<Book> SearchByYear(string yearInput)
    {
        if (int.TryParse(yearInput, out int year))
        {
            return _books.Where(book => book.Year == year).ToList();
        }

        return new List<Book>();
    }

    private List<Book> SearchByGenre(string genre)
    {
        return _books.Where(books => books.Genre.Equals(genre, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void DisplaySearchResults(List<Book> foundBooks, string searchType, string searchValue)
    {
        if (foundBooks.Count == 0)
        {
            Console.WriteLine($"Книги по критерию '{searchType}: {searchValue}' не найдены.");
        }
        else
        {
            Console.WriteLine($"\nНайденные книги ({searchType}: {searchValue}):");

            foreach (var book in foundBooks)
            {
                Console.WriteLine(book);
            }
        }
    }
}

class Program
{
    static void Main()
    {
        const string CommandAddBook = "1";
        const string CommandRemoveBook = "2";
        const string CommandShowAllBooks = "3";
        const string CommandSearchBooks = "4";
        const string CommandExit = "5";

        BookStorage storage = new BookStorage();
        bool isRun = true;

        Console.WriteLine("Добро пожаловать в хранилище книг!");

        while (isRun)
        {
            Console.WriteLine("\nВыберите действие:");
            Console.WriteLine($"{CommandAddBook} - Добавить книгу");
            Console.WriteLine($"{CommandRemoveBook} - Удалить книгу");
            Console.WriteLine($"{CommandShowAllBooks} - Показать все книги");
            Console.WriteLine($"{CommandSearchBooks} - Поиск книг");
            Console.WriteLine($"{CommandExit} - Выход");

            string choice = Console.ReadLine();

            switch (choice)
            {
                case CommandAddBook:
                    AddBookMenu(storage);
                    break;

                case CommandRemoveBook:
                    RemoveBookMenu(storage);
                    break;

                case CommandShowAllBooks:
                    storage.DisplayAllBooks();
                    break;

                case CommandSearchBooks:
                    SearchBooksMenu(storage);
                    break;

                case CommandExit:
                    isRun = false;
                    break;

                default:
                    Console.WriteLine("Неверный выбор. Попробуйте снова.");
                    break;
            }
        }

        Console.WriteLine("Работа программы завершена");
    }

    static void AddBookMenu(BookStorage storage)
    {
        Console.Write("Введите название книги: ");
        string title = Console.ReadLine();

        Console.Write("Введите автора книги: ");
        string author = Console.ReadLine();

        int year = ReadInt("Введите год выпуска: ");
        Console.Write("Введите жанр (необязательно): ");
        string genre = Console.ReadLine();

        int pages = ReadInt("Введите количество страниц (необязательно, 0 если пропустить): ");

        Book newBook = new Book(title, author, year, genre, pages);
        storage.AddBook(newBook);
    }

    static void RemoveBookMenu(BookStorage storage)
    {
        storage.DisplayAllBooks();

        if (storage.BookCount > 0)
        {
            int index = ReadInt("Введите номер книги для удаления: ", 1, storage.BookCount) - 1;
            storage.RemoveBook(index);
        }
    }

    static void SearchBooksMenu(BookStorage storage)
    {
        const string CommandSearchByName = "1";
        const string CommandSearchByAuthor = "2";
        const string CommandSearchByYear = "3";
        const string CommandSearchByGenre = "4";

        Console.WriteLine("Выберите тип поиска:");
        Console.WriteLine($"{CommandSearchByName} - По названию");
        Console.WriteLine($"{CommandSearchByAuthor} - По автору");
        Console.WriteLine($"{CommandSearchByYear} - По году выпуска");
        Console.WriteLine($"{CommandSearchByGenre} - По жанру");

        string searchChoice = Console.ReadLine();
        string searchType = "";
        string searchValue = "";

        switch (searchChoice)
        {
            case CommandSearchByName:
                searchType = "название";
                Console.Write("Введите название для поиска: ");
                break;

            case CommandSearchByAuthor:
                searchType = "автор";
                Console.Write("Введите автора для поиска: ");
                break;

            case CommandSearchByYear:
                searchType = "год";
                Console.Write("Введите год выпуска для поиска: ");
                break;

            case CommandSearchByGenre:
                searchType = "жанр";
                Console.Write("Введите жанр для поиска: ");
                break;

            default:
                Console.WriteLine("Неверный выбор.");
                return;
        }

        searchValue = Console.ReadLine();
        storage.SearchBooks(searchType, searchValue);
    }

    static int ReadInt(string message, int minValue = int.MinValue, int maxValue = int.MaxValue)
    {
        int result;

        while (true)
        {
            Console.Write(message);

            if (int.TryParse(Console.ReadLine(), out result))
            {
                if (result >= minValue && result <= maxValue)
                {
                    return result;
                }
                Console.WriteLine($"Введите число от {minValue} до {maxValue}");
            }
            else
            {
                Console.WriteLine("Некорректный ввод. Пожалуйста, введите целое число.");
            }
        }
    }
}
