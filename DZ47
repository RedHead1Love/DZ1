using System;

class Program
{
    static void Main()
    {
        RunGame();
    }

    static void RunGame()
    {
        const int mapWidth = 20;
        const int mapHeight = 10;

        int playerX = 1;
        int playerY = 1;
        bool isRunning = true;

        char[,] map = InitializeMap(mapWidth, mapHeight);

        while (isRunning)
        {
            Console.Clear();
            DrawMap(map);
            DrawPlayer(playerX, playerY);

            Console.WriteLine("WASD - перемещение, Q - выход");

            GetMovementInput(out int xDirection, out int yDirection, out isRunning);

            if (isRunning == false)
            {
                continue;
            }

            TryMovePlayer(ref playerX, ref playerY, xDirection, yDirection, map);
        }
    }

    static char[,] InitializeMap(int width, int height)
    {
        char[,] map = new char[height, width];
        Random random = new Random();

        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                if (x == 0 || y == 0 || x == width - 1 || y == height - 1)
                {
                    map[y, x] = '#';
                }
                else if (random.Next(0, 10) < 2)
                {
                    map[y, x] = '#';
                }
                else if (random.Next(0, 20) < 1)
                {
                    map[y, x] = '$';
                }
                else if (random.Next(0, 30) < 1)
                {
                    map[y, x] = 'D';
                }
                else
                {
                    map[y, x] = '.';
                }
            }
        }

        return map;
    }

    static void DrawMap(char[,] map)
    {
        for (int y = 0; y < map.GetLength(0); y++)
        {
            for (int x = 0; x < map.GetLength(1); x++)
            {
                Console.Write(map[y, x]);
            }
            Console.WriteLine();
        }
    }

    static void DrawPlayer(int playerX, int playerY)
    {
        Console.SetCursorPosition(playerX, playerY);
        Console.Write('@');
        Console.SetCursorPosition(0, Console.WindowHeight - 1);
    }

    static void GetMovementInput(out int xDirection, out int yDirection, out bool shouldQuit)
    {
        xDirection = 0;
        yDirection = 0;
        shouldQuit = false;

        const ConsoleKey MoveUpCommand = ConsoleKey.W;
        const ConsoleKey MoveDownCommand = ConsoleKey.S;
        const ConsoleKey MoveLeftCommand = ConsoleKey.A;
        const ConsoleKey MoveRightCommand = ConsoleKey.D;
        const ConsoleKey QuitCommand = ConsoleKey.Q;

        ConsoleKeyInfo key = Console.ReadKey(true);

        switch (key.Key)
        {
            case MoveUpCommand:
                yDirection = -1;
                break;

            case MoveDownCommand:
                yDirection = 1;
                break;

            case MoveLeftCommand:
                xDirection = -1;
                break;

            case MoveRightCommand:
                xDirection = 1;
                break;

            case QuitCommand:
                shouldQuit = true;
                break;
        }
    }

    static void TryMovePlayer(ref int playerX, ref int playerY, int xDirection, int yDirection, char[,] map)
    {
        int newX = playerX + xDirection;
        int newY = playerY + yDirection;

        if (newX < 0 || newY < 0 || newX >= map.GetLength(1) || newY >= map.GetLength(0))
            return;

        char targetCell = map[newY, newX];

        if (targetCell == '#')
            return;

        HandleSpecialCell(targetCell);

        playerX = newX;
        playerY = newY;
    }

    static void HandleSpecialCell(char cell)
    {
        if (cell == '$')
        {
            Console.WriteLine("Вы нашли сокровище");
            Console.ReadKey();
        }
        else if (cell == 'D')
        {
            Console.WriteLine("Вы нашли дверь");
            Console.ReadKey();
        }
    }
}
