using System;

class Program
{
    static void Main()
    {
        const ConsoleKey ExitCommand = ConsoleKey.Q;

        int playerX = 1;
        int playerY = 1;
        bool isRun = true;

        char[,] map = InitializeMap();

        while (isRun)
        {
            Console.Clear();
            DrawMap(map);
            DrawPlayer(playerX, playerY);

            Console.WriteLine("WASD - перемещение, Q - выход");

            ConsoleKey key = GetMovementInput();

            if (key == ExitCommand)
            {
                isRun = false;
                continue;
            }

            GetDirection(key, out int xDirection, out int yDirection);
            TryMovePlayer(ref playerX, ref playerY, xDirection, yDirection, map);

            VerifyPlayerPosition(playerX, playerY, map);
        }
    }

    static char[,] InitializeMap()
    {
        int MapWidth = 20;
        int MapHeight = 10;
        int WallSpawnChance = 20;
        int TreasureSpawnChance = 5;
        int DoorSpawnChance = 3;

        char WallSymbol = '#';
        char EmptySymbol = '.';
        char TreasureSymbol = '$';
        char DoorSymbol = 'D';

        int minimumRandomWallSpawnChance = 0;
        int maximumRandomWallSpawnChance = 100;

        int minimumRandomTreasureSpawnChance = 0;
        int maximumRandomTreasureSpawnChance = 100;

        int minimumRandomDoorSpawnChance = 0;
        int maximumRandomDoorSpawnChance = 100;




        char[,] map = new char[MapHeight, MapWidth];
        Random random = new Random();

        for (int y = 0; y < MapHeight; y++)
        {
            for (int x = 0; x < MapWidth; x++)
            {
                if (x == 0 || y == 0 || x == MapWidth - 1 || y == MapHeight - 1)
                {
                    map[y, x] = WallSymbol;
                }
                else if (random.Next(minimumRandomWallSpawnChance, maximumRandomWallSpawnChance) < WallSpawnChance)
                {
                    map[y, x] = WallSymbol;
                }
                else if (random.Next(minimumRandomTreasureSpawnChance, maximumRandomTreasureSpawnChance) < TreasureSpawnChance)
                {
                    map[y, x] = TreasureSymbol;
                }
                else if (random.Next(minimumRandomDoorSpawnChance, maximumRandomDoorSpawnChance) < DoorSpawnChance)
                {
                    map[y, x] = DoorSymbol;
                }
                else
                {
                    map[y, x] = EmptySymbol;
                }
            }
        }

        return map;
    }

    static void DrawMap(char[,] map)
    {
        for (int y = 0; y < map.GetLength(0); y++)
        {
            for (int x = 0; x < map.GetLength(1); x++)
            {
                Console.Write(map[y, x]);
            }
            Console.WriteLine();
        }
    }

    static void DrawPlayer(int playerX, int playerY)
    {
        char PlayerSymbol = '@';

        Console.SetCursorPosition(playerX, playerY);
        Console.Write(PlayerSymbol);
        Console.SetCursorPosition(0, Console.WindowHeight - 1);
    }

    static ConsoleKey GetMovementInput()
    {
        return Console.ReadKey(true).Key;
    }

    static void GetDirection(ConsoleKey key, out int xDirection, out int yDirection)
    {
        const ConsoleKey MoveUpCommand = ConsoleKey.W;
        const ConsoleKey MoveDownCommand = ConsoleKey.S;
        const ConsoleKey MoveLeftCommand = ConsoleKey.A;
        const ConsoleKey MoveRightCommand = ConsoleKey.D;

        xDirection = 0;
        yDirection = 0;

        switch (key)
        {
            case MoveUpCommand:
                yDirection = -1;
                break;
            case MoveDownCommand:
                yDirection = 1;
                break;
            case MoveLeftCommand:
                xDirection = -1;
                break;
            case MoveRightCommand:
                xDirection = 1;
                break;
        }
    }

    static void TryMovePlayer(ref int playerX, ref int playerY, int xDirection, int yDirection, char[,] map)
    {
        char WallSymbol = '#';

        int newX = playerX + xDirection;
        int newY = playerY + yDirection;

        if (newX < 0 || newY < 0 || newX >= map.GetLength(1) || newY >= map.GetLength(0))
            return;

        if (map[newY, newX] == WallSymbol)
            return;

        playerX = newX;
        playerY = newY;
    }

    static void VerifyPlayerPosition(int playerX, int playerY, char[,] map)
    {
        char EmptySymbol = '.';
        char TreasureSymbol = '$';
        char DoorSymbol = 'D';

        char cell = map[playerY, playerX];

        if (cell == TreasureSymbol)
        {
            Console.WriteLine("Вы нашли сокровище");
            Console.ReadKey();
            map[playerY, playerX] = EmptySymbol;
        }
        else if (cell == DoorSymbol)
        {
            Console.WriteLine("Вы нашли дверь");
            Console.ReadKey();
        }
    }
}
