using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        var database = new Database();
        database.Run();
    }
}

public class Database
{
    private List<Player> _players = new List<Player>();
    private int _nextId = 1;

    public void Run()
    {
        const string CommandAddPlayer = "1";
        const string CommandBanPlayer = "2";
        const string CommandUnbanPlayer = "3";
        const string CommandDeletePlayer = "4";
        const string CommandShowAllPlayers = "5";
        const string CommandExit = "6";

        bool isRunning = true;

        while (isRunning)
        {
            Console.Clear();
            Console.WriteLine("=== ИГРОВАЯ БАЗА ДАННЫХ ===");
            Console.WriteLine($"{CommandAddPlayer}. Добавить игрока");
            Console.WriteLine($"{CommandBanPlayer}. Забанить игрока");
            Console.WriteLine($"{CommandUnbanPlayer}. Разбанить игрока");
            Console.WriteLine($"{CommandDeletePlayer}. Удалить игрока");
            Console.WriteLine($"{CommandShowAllPlayers}. Показать всех игроков");
            Console.WriteLine($"{CommandExit}. Выход");
            Console.Write("Выберите действие: ");

            var input = Console.ReadLine();

            switch (input)
            {
                case CommandAddPlayer:
                    AddPlayer();
                    break;

                case CommandBanPlayer:
                    BanPlayer();
                    break;

                case CommandUnbanPlayer:
                    UnbanPlayer();
                    break;

                case CommandDeletePlayer:
                    DeletePlayer();
                    break;

                case CommandShowAllPlayers:
                    ShowAllPlayers();
                    break;

                case CommandExit:
                    isRunning = false;
                    break;

                default:
                    Console.WriteLine("Неверный ввод");
                    Console.ReadKey();
                    break;
            }
        }
    }

    private void AddPlayer()
    {
        Console.Clear();
        Console.WriteLine("=== ДОБАВЛЕНИЕ ИГРОКА ===");

        Console.Write("Введите никнейм: ");
        var nickname = Console.ReadLine();

        int level = GetValidLevelInput();

        var player = new Player(_nextId++, nickname, level);
        _players.Add(player);

        Console.WriteLine($"\nИгрок {nickname} успешно добавлен с ID {player.Id}!");
        Console.ReadKey();
    }

    private int GetValidLevelInput()
    {
        int level;

        while (true)
        {
            Console.Write("Введите уровень: ");
            if (int.TryParse(Console.ReadLine(), out level) && level >= 0)
                return level;

            Console.WriteLine("Некорректный уровень! Должно быть целое число >= 0");
        }
    }

    private void BanPlayer()
    {
        Console.Clear();
        Console.WriteLine("=== БАН ИГРОКА ===");

        if (TryGetPlayer(out Player player))
        {
            player.Ban();
            Console.WriteLine($"Игрок {player.Nickname} успешно забанен");
            Console.ReadKey();
        }
    }

    private void UnbanPlayer()
    {
        Console.Clear();
        Console.WriteLine("=== РАЗБАН ИГРОКА ===");

        if (TryGetPlayer(out Player player))
        {
            player.Unban();
            Console.WriteLine($"Игрок {player.Nickname} успешно разбанен");
            Console.ReadKey();
        }
    }

    private void DeletePlayer()
    {
        Console.Clear();
        Console.WriteLine("=== УДАЛЕНИЕ ИГРОКА ===");

        if (TryGetPlayer(out Player player))
        {
            _players.Remove(player);
            Console.WriteLine($"Игрок {player.Nickname} успешно удален");
            Console.ReadKey();
        }
    }

    private bool TryGetPlayer(out Player player)
    {
        player = null;
        int id = GetPlayerIdFromInput();

        if (id == -1)
            return false;

        player = _players.Find(gamer => gamer.Id == id);

        if (player == null)
        {
            Console.WriteLine("Игрок с таким ID не найден");
            Console.ReadKey();
            return false;
        }

        return true;
    }

    private int GetPlayerIdFromInput()
    {
        while (true)
        {
            Console.Write("Введите ID игрока: ");

            if (int.TryParse(Console.ReadLine(), out var id))
            {
                if (id == 0) return -1;
                if (id > 0) return id;
            }
            Console.WriteLine("Некорректный ID, должно быть положительное число.");
        }
    }

    private void ShowAllPlayers()
    {
        const int idColumnWidth = 5;
        const int nicknameColumnWidth = 20;
        const int levelColumnWidth = 10;
        const int statusColumnWidth = 10;

        Console.Clear();
        Console.WriteLine("=== СПИСОК ВСЕХ ИГРОКОВ ===");

        if (_players.Count == 0)
        {
            Console.WriteLine("Нет зарегистрированных игроков.");
        }
        else
        {
            string headerFormat = $"{"ID",-idColumnWidth} {"Никнейм",-nicknameColumnWidth} {"Уровень",-levelColumnWidth} {"Статус",-statusColumnWidth}";
            Console.WriteLine(headerFormat);
            Console.WriteLine(new string('-', idColumnWidth + nicknameColumnWidth + levelColumnWidth + statusColumnWidth + 3));

            string rowFormat = $"{{0,-{idColumnWidth}}} {{1,-{nicknameColumnWidth}}} {{2,-{levelColumnWidth}}} {{3,-{statusColumnWidth}}}";

            foreach (var player in _players)
            {
                Console.WriteLine(rowFormat, player.Id, player.Nickname, player.Level, player.Status);
            }
        }

        Console.WriteLine("\nНажмите любую клавишу для продолжения");
        Console.ReadKey();
    }
}

public class Player
{
    public int Id { get; }
    public string Nickname { get; }
    public int Level { get; }
    public bool IsBanned { get; private set; }
    public string Status => IsBanned ? "Забанен" : "Активен";

    public Player(int id, string nickname, int level)
    {
        Id = id;
        Nickname = nickname;
        Level = level;
        IsBanned = false;
    }

    public void Ban()
    {
        IsBanned = true;
    }

    public void Unban()
    {
        IsBanned = false;
    }
}
