using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        var database = new PlayerDatabase();
        database.Run();
    }
}

public class PlayerDatabase
{
    private List<Player> players = new List<Player>();
    private int nextId = 1;

    public void Run()
    {
        const string CommandAddPlayer = "1";
        const string CommandBunnedPlayer = "2";
        const string CommandUnbunnedPlayer = "3";
        const string CommandDeletePlayer = "4";
        const string CommandShowAllPlayers = "5";
        const string CommandExit = "6";

        while (true)
        {
            Console.Clear();
            Console.WriteLine("=== ИГРОВАЯ БАЗА ДАННЫХ ===");
            Console.WriteLine($"{CommandAddPlayer}. Добавить игрока");
            Console.WriteLine($"{CommandBunnedPlayer}. Забанить игрока");
            Console.WriteLine($"{CommandUnbunnedPlayer}. Разбанить игрока");
            Console.WriteLine($"{CommandDeletePlayer}. Удалить игрока");
            Console.WriteLine($"{CommandShowAllPlayers}. Показать всех игроков");
            Console.WriteLine($"{CommandExit}. Выход");
            Console.Write("Выберите действие: ");

            var input = Console.ReadLine();

            switch (input)
            {
                case CommandAddPlayer:
                    AddPlayer();
                    break;

                case CommandBunnedPlayer:
                    ChangeBanStatus(true);
                    break;

                case CommandUnbunnedPlayer:
                    ChangeBanStatus(false);
                    break;

                case CommandDeletePlayer:
                    DeletePlayer();
                    break;

                case CommandShowAllPlayers:
                    ShowAllPlayers();
                    break;

                case CommandExit:
                    return;

                default:

                    Console.WriteLine("Неверный ввод");
                    Console.ReadKey();
                    break;
            }
        }
    }

    private void AddPlayer()
    {
        Console.Clear();
        Console.WriteLine("=== ДОБАВЛЕНИЕ ИГРОКА ===");

        Console.Write("Введите никнейм: ");

        var nickname = Console.ReadLine();

        int level;

        while (true)
        {
            Console.Write("Введите уровень: ");

            if (int.TryParse(Console.ReadLine(), out level) && level >= 0)
                break;
            Console.WriteLine("Некорректный уровень! Должно быть целое число >= 0");
        }

        var player = new Player
        {
            Id = nextId++,
            Nickname = nickname,
            Level = level,
            IsBanned = false
        };

        players.Add(player);

        Console.WriteLine($"\nИгрок {nickname} успешно добавлен с ID {player.Id}!");
        Console.ReadKey();
    }

    private void ChangeBanStatus(bool ban)
    {
        Console.Clear();
        Console.WriteLine($"=== {(ban ? "БАН" : "РАЗБАН")} ИГРОКА ===");

        var id = GetPlayerIdFromInput();

        if (id == -1) return;

        var player = players.Find(p => p.Id == id);

        if (player == null)
        {
            Console.WriteLine("Игрок с таким ID не найден");
            Console.ReadKey();
            return;
        }

        player.IsBanned = ban;
        Console.WriteLine($"Игрок {player.Nickname} успешно {(ban ? "забанен" : "разбанен")}");
        Console.ReadKey();
    }

    private void DeletePlayer()
    {
        Console.Clear();
        Console.WriteLine("=== УДАЛЕНИЕ ИГРОКА ===");

        var id = GetPlayerIdFromInput();
        if (id == -1) return;

        var player = players.Find(p => p.Id == id);

        if (player == null)
        {
            Console.WriteLine("Игрок с таким ID не найден");
            Console.ReadKey();
            return;
        }

        players.Remove(player);

        Console.WriteLine($"Игрок {player.Nickname} успешно удален");
        Console.ReadKey();
    }

    private void ShowAllPlayers()
    {
        int idColumnWidth = 5;
        int nicknameColumnWidth = 20;
        int levelColumnWidth = 10;
        int statusColumnWidth = 10;

        string idHeader = "ID";
        string nicknameHeader = "Никнейм";
        string levelHeader = "Уровень";
        string statusHeader = "Статус";

        Console.Clear();
        Console.WriteLine("=== СПИСОК ВСЕХ ИГРОКОВ ===");

        if (players.Count == 0)
        {
            Console.WriteLine("Нет зарегистрированных игроков.");
        }
        else
        {
            string headerFormat = $"{{0,-{idColumnWidth}}} {{1,-{nicknameColumnWidth}}} {{2,-{levelColumnWidth}}} {{3,-{statusColumnWidth}}}";
            Console.WriteLine(headerFormat, idHeader, nicknameHeader, levelHeader, statusHeader);
            Console.WriteLine(new string('-', idColumnWidth + nicknameColumnWidth + levelColumnWidth + statusColumnWidth + 3));

            string rowFormat = $"{{0,-{idColumnWidth}}} {{1,-{nicknameColumnWidth}}} {{2,-{levelColumnWidth}}} {{3,-{statusColumnWidth}}}";

            foreach (var player in players)
            {
                var status = player.IsBanned ? "Забанен" : "Активен";
                Console.WriteLine(rowFormat, player.Id, player.Nickname, player.Level, status);
            }
        }

        Console.WriteLine("\nНажмите любую клавишу для продолжения");
        Console.ReadKey();
    }

    private int GetPlayerIdFromInput()
    {
        while (true)
        {
            Console.Write("Введите ID игрока (или 0 для отмены): ");

            if (int.TryParse(Console.ReadLine(), out var id))
            {
                if (id == 0) return -1;
                if (id > 0) return id;
            }
            Console.WriteLine("Некорректный ID, Должно быть положительное число.");
        }
    }
}

public class Player
{
    public int Id { get; set; }
    public string Nickname { get; set; }
    public int Level { get; set; }
    public bool IsBanned { get; set; }
}
