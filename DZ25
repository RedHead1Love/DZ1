using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        var database = new Database();
        database.Run();
    }
}

public class Database
{
    private const int MinimumLevel = 0;
    private const int CancelInputId = 0;

    private List<Player> _players = new List<Player>();
    private int _nextPlayerId = 1;

    public void Run()
    {
        const string CommandAddPlayer = "1";
        const string CommandBanPlayer = "2";
        const string CommandUnbanPlayer = "3";
        const string CommandDeletePlayer = "4";
        const string CommandShowAllPlayers = "5";
        const string CommandExit = "6";

        bool isRun = true;

        while (isRun)
        {
            Console.Clear();
            Console.WriteLine("=== ИГРОВАЯ БАЗА ДАННЫХ ===");
            Console.WriteLine($"{CommandAddPlayer}. Добавить игрока");
            Console.WriteLine($"{CommandBanPlayer}. Забанить игрока");
            Console.WriteLine($"{CommandUnbanPlayer}. Разбанить игрока");
            Console.WriteLine($"{CommandDeletePlayer}. Удалить игрока");
            Console.WriteLine($"{CommandShowAllPlayers}. Показать всех игроков");
            Console.WriteLine($"{CommandExit}. Выход");
            Console.Write("Выберите действие: ");

            var input = Console.ReadLine();

            switch (input)
            {
                case CommandAddPlayer:
                    AddPlayer();
                    break;

                case CommandBanPlayer:
                    BanPlayer();
                    break;

                case CommandUnbanPlayer:
                    UnbanPlayer();
                    break;

                case CommandDeletePlayer:
                    DeletePlayer();
                    break;

                case CommandShowAllPlayers:
                    ShowAllPlayers();
                    break;

                case CommandExit:
                    isRun = false;
                    break;

                default:
                    Console.WriteLine("Неверный ввод");
                    Console.ReadKey();
                    break;
            }
        }
    }

    private void AddPlayer()
    {
        Console.Clear();
        Console.WriteLine("=== ДОБАВЛЕНИЕ ИГРОКА ===");

        Console.Write("Введите никнейм: ");
        var nickname = Console.ReadLine();

        int level = GetValidLevelInput();

        var player = new Player(_nextPlayerId++, nickname, level);
        _players.Add(player);

        Console.WriteLine($"\nИгрок {nickname} успешно добавлен с ID {player.Id}!");
        Console.ReadKey();
    }

    private int GetValidLevelInput()
    {
        int level = 0;
        bool isValidInput = false;

        while (isValidInput == false)
        {
            Console.Write("Введите уровень: ");

            if (int.TryParse(Console.ReadLine(), out level) && level >= MinimumLevel)
            {
                isValidInput = true;
            }
            else
            {
                Console.WriteLine($"Некорректный уровень! Должно быть целое число >= {MinimumLevel}");
            }
        }

        return level;
    }

    private void BanPlayer()
    {
        Console.Clear();
        Console.WriteLine("=== БАН ИГРОКА ===");

        Player player;

        if (TryGetPlayer(out player) == false)
            return;

        player.Ban();
        Console.WriteLine($"Игрок {player.Nickname} успешно забанен");
        Console.ReadKey();
    }

    private void UnbanPlayer()
    {
        Console.Clear();
        Console.WriteLine("=== РАЗБАН ИГРОКА ===");

        Player player;

        if (TryGetPlayer(out player) == false)
            return;

        player.Unban();

        Console.WriteLine($"Игрок {player.Nickname} успешно разбанен");
        Console.ReadKey();
    }

    private void DeletePlayer()
    {
        Console.Clear();
        Console.WriteLine("=== УДАЛЕНИЕ ИГРОКА ===");

        Player player;

        if (TryGetPlayer(out player) == false)
            return;

        _players.Remove(player);

        Console.WriteLine($"Игрок {player.Nickname} успешно удален");
        Console.ReadKey();
    }

    private bool TryGetPlayer(out Player player)
    {
        player = null;
        int id = GetPlayerIdFromInput();

        if (id == CancelInputId)
            return false;

        player = _players.Find(gamer => gamer.Id == id);

        if (player == null)
        {
            Console.WriteLine("Игрок с таким ID не найден");
            Console.ReadKey();
            return false;
        }

        return true;
    }

    private int GetPlayerIdFromInput()
    {
        bool isValidInput = false;
        int id = -1;

        while (isValidInput == false)
        {
            Console.Write($"Введите ID игрока (или {CancelInputId} для отмены): ");
            string input = Console.ReadLine();

            if (int.TryParse(input, out id))
            {
                if (id >= 0)
                {
                    isValidInput = true;
                }
                else
                {
                    Console.WriteLine("Ошибка: ID должен быть положительным.");
                }
            }
            else
            {
                Console.WriteLine("Ошибка: Введите целое число.");
            }
        }

        return id;
    }

    private void ShowAllPlayers()
    {
        const int IdColumnWidth = 5;
        const int NicknameColumnWidth = 20;
        const int LevelColumnWidth = 10;
        const int StatusColumnWidth = 10;

        Console.Clear();
        Console.WriteLine("=== СПИСОК ВСЕХ ИГРОКОВ ===");

        if (_players.Count == 0)
        {
            Console.WriteLine("Нет зарегистрированных игроков.");
        }
        else
        {
            string headerFormat = $"{"ID",-IdColumnWidth} {"Никнейм",-NicknameColumnWidth} {"Уровень",-LevelColumnWidth} {"Статус",-StatusColumnWidth}";
            Console.WriteLine(headerFormat);
            Console.WriteLine(new string('-', IdColumnWidth + NicknameColumnWidth + LevelColumnWidth + StatusColumnWidth + 3));

            string rowFormat = $"{{0,-{IdColumnWidth}}} {{1,-{NicknameColumnWidth}}} {{2,-{LevelColumnWidth}}} {{3,-{StatusColumnWidth}}}";

            foreach (var player in _players)
            {
                Console.WriteLine(rowFormat, player.Id, player.Nickname, player.Level, player.Status);
            }
        }

        Console.WriteLine("\nНажмите любую клавишу для продолжения");
        Console.ReadKey();
    }
}

public class Player
{

    public Player(int id, string nickname, int level)
    {
        Id = id;
        Nickname = nickname;
        Level = level;
        IsBanned = false;
    }

    public int Id { get; }
    public string Nickname { get; }
    public int Level { get; }
    public string Status => IsBanned ? "Забанен" : "Активен";
    public bool IsBanned { get; private set; }

    public void Ban()
    {
        IsBanned = true;
    }

    public void Unban()
    {
        IsBanned = false;
    }
}
