using System;
using System.Collections.Generic;

class CurrencyConverter
{
    static void Main()
    {
        decimal rubBalance = 1000m;
        decimal usdBalance = 50m;
        decimal eurBalance = 30m;

        var exchangeRates = new Dictionary<string, decimal>
        {
            ["RUB>USD"] = 0.011m,
            ["RUB>EUR"] = 0.010m,
            ["USD>RUB"] = 90.0m,
            ["USD>EUR"] = 0.91m,
            ["EUR>RUB"] = 100.0m,
            ["EUR>USD"] = 1.10m
        };

        Console.WriteLine("Добро пожаловать в конвертер валют");

        bool shouldContinue = true;
        while (shouldContinue)
        {
            ShowBalances(rubBalance, usdBalance, eurBalance);
            ShowMenu();

            string choice = Console.ReadLine();
            shouldContinue = ProcessChoice(choice, ref rubBalance, ref usdBalance, ref eurBalance, exchangeRates);
        }

        ExitProgram();
    }
    static void ShowBalances(decimal rub, decimal usd, decimal eur)
    {
        Console.WriteLine("\nТекущий баланс:");
        Console.WriteLine($"RUB: {rub}");
        Console.WriteLine($"USD: {usd}");
        Console.WriteLine($"EUR: {eur}");
    }
    static void ShowMenu()
    {
        Console.WriteLine("\nВыберите операцию:");
        Console.WriteLine("1. RUB → USD");
        Console.WriteLine("2. RUB → EUR");
        Console.WriteLine("3. USD → RUB");
        Console.WriteLine("4. USD → EUR");
        Console.WriteLine("5. EUR → RUB");
        Console.WriteLine("6. EUR → USD");
        Console.WriteLine("7. Выйти");
        Console.Write("Ваш выбор: ");
    }
    static bool ProcessChoice(string choice, ref decimal rubBalance, ref decimal usdBalance, ref decimal eurBalance,
                            Dictionary<string, decimal> rates)
    {
        switch (choice)
        {
            case "1":
                ConvertCurrency("RUB", "USD", rates["RUB>USD"], ref rubBalance, ref usdBalance);
                return true;
            case "2":
                ConvertCurrency("RUB", "EUR", rates["RUB>EUR"], ref rubBalance, ref eurBalance);
                return true;
            case "3":
                ConvertCurrency("USD", "RUB", rates["USD>RUB"], ref usdBalance, ref rubBalance);
                return true;
            case "4":
                ConvertCurrency("USD", "EUR", rates["USD>EUR"], ref usdBalance, ref eurBalance);
                return true;
            case "5":
                ConvertCurrency("EUR", "RUB", rates["EUR>RUB"], ref eurBalance, ref rubBalance);
                return true;
            case "6":
                ConvertCurrency("EUR", "USD", rates["EUR>USD"], ref eurBalance, ref usdBalance);
                return true;
            case "7":
                return false;
            default:
                ShowError();
                return true;
        }
    }
    static void ConvertCurrency(string fromCurrency, string toCurrency, decimal rate,
                              ref decimal fromBalance, ref decimal toBalance)
    {
        Console.Write($"Введите сумму в {fromCurrency} для конвертации: ");
        if (!decimal.TryParse(Console.ReadLine(), out decimal amount))
        {
            Console.WriteLine("Ошибка ввода. Пожалуйста, введите корректное число.");
            return;
        }

        if (amount <= 0)
        {
            Console.WriteLine("Сумма должна быть положительной!");
            return;
        }

        if (fromBalance < amount)
        {
            Console.WriteLine($"Недостаточно средств на балансе {fromCurrency}!");
            return;
        }

        decimal convertedAmount = amount * rate;
        fromBalance -= amount;
        toBalance += convertedAmount;
        Console.WriteLine($"Конвертировано {amount} {fromCurrency} в {convertedAmount} {toCurrency}");
    }
    static void ExitProgram()
    {
        Console.WriteLine("До свидания!");
    }
    static void ShowError()
    {
        Console.WriteLine("Неверный выбор. Попробуйте снова.");
    }
}
