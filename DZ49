using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        ZooFactory zooFactory = new ZooFactory();
        Zoo zoo = zooFactory.CreateZoo();
        zoo.Run();
    }
}

class ZooFactory
{
    public Zoo CreateZoo()
    {
        var enclosures = new List<Enclosure>
        {
            CreateEnclosure("Львы", "Рычание", "Саванна", "Лев", new[] {"самец"}, 3),
            CreateEnclosure("Пингвины", "Крики", "Антарктика", "Пингвин", new[] {"самец", "самка"}, 10),
            CreateEnclosure("Обезьяны", "У-у-у-а-а-а!", "Джунгли", "Обезьяна", new[] {"самец", "самка"}, 5),
            CreateEnclosure("Зебры", "Фырканье", "Саванна", "Зебра", new[] {"самка"}, 4)
        };

        return new Zoo(enclosures);
    }

    private Enclosure CreateEnclosure(string animalType, string sound, string habitat,
                                    string species, string[] genders, int count)
    {
        var animals = new List<Animal>();

        for (int i = 0; i < count; i++)
        {
            string gender = genders[i % genders.Length];
            animals.Add(new Animal(species, gender));
        }

        return new Enclosure(new Sign(animalType, sound, habitat), animals);
    }
}

class Zoo
{
    private const string CommandExit = "0";
    private readonly List<Enclosure> _enclosures;

    public Zoo(List<Enclosure> enclosures)
    {
        this._enclosures = enclosures;
    }

    public void Run()
    {
        Console.WriteLine("Добро пожаловать в зоопарк");
        bool isRunning = true;

        while (isRunning)
        {
            ShowMenu();
            string input = Console.ReadLine();

            if (input == CommandExit)
            {
                isRunning = false;
                continue;
            }

            if (int.TryParse(input, out int choice) && choice > 0 && choice <= _enclosures.Count)
            {
                _enclosures[choice - 1].DisplayInfo();
            }
            else
            {
                Console.WriteLine("Некорректный ввод. Попробуйте еще раз.");
            }
        }

        Console.WriteLine("До свидания");
    }

    private void ShowMenu()
    {
        Console.WriteLine("\nВыберите вольер для просмотра (введите номер):");

        for (int i = 0; i < _enclosures.Count; i++)
        {
            Console.WriteLine($"{i + 1}. {_enclosures[i].AnimalType}");
        }

        Console.WriteLine($"{CommandExit}. Выход из зоопарка");
    }
}

class Enclosure
{
    private readonly List<Animal> _animals;

    public Enclosure(Sign sign, List<Animal> animals)
    {
        Sign = sign;
        this._animals = animals;
    }

    public Sign Sign { get; }
    public string AnimalType => Sign.AnimalType;

    public void DisplayInfo()
    {
        Console.WriteLine("\n=== Информация о вольере ===");

        Sign.Display();
        Console.WriteLine($"Количество животных: {_animals.Count}");
        Console.WriteLine($"Пол животных: {GetGenderDescription()}");

        Console.WriteLine("============================");
    }

    private string GetGenderDescription()
    {
        int males = 0;
        int females = 0;

        foreach (var animal in _animals)
        {
            if (animal.Gender == Gender.Male)
                males++;
            else
                females++;
        }

        if (males > 0 && females > 0)
            return "самцы и самки";
        else if (males > 0)
            return "самцы";
        else
            return "самки";
    }
}

class Sign
{
    private readonly string _sound;
    private readonly string _habitat;

    public Sign(string animalType, string sound, string habitat)
    {
        AnimalType = animalType;
        this._sound = sound;
        this._habitat = habitat;
    }

    public string AnimalType { get; }

    public void Display()
    {
        Console.WriteLine($"Тип животных: {AnimalType}");
        Console.WriteLine($"Среда обитания: {_habitat}");
        Console.WriteLine($"Звук: {_sound}");
    }
}

class Animal
{
    public Animal(string species, string gender)
    {
        Species = species;
        Gender = gender == "самец" ? Gender.Male : Gender.Female;
    }

    public string Species { get; }
    public Gender Gender { get; }
}

enum Gender
{
    Male,
    Female
}
