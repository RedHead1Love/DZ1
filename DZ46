using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main()
    {
        BattleSimulator simulator = new BattleSimulator();
        simulator.RunBattle();
    }
}

class BattleSimulator
{
    private Platoon _platoon1;
    private Platoon _platoon2;
    private Random _random;

    public BattleSimulator()
    {
        _random = new Random();
        _platoon1 = CreatePlatoon(1);
        _platoon2 = CreatePlatoon(2);
    }

    public void RunBattle()
    {
        int round = 1;

        while (_platoon1.HasAliveSoldiers() && _platoon2.HasAliveSoldiers())
        {
            Console.WriteLine($"\n--- Раунд {round} ---");

            Console.WriteLine("\nАтака взвода 1:");
            _platoon1.Attack(_platoon2);

            Console.WriteLine("\nАтака взвода 2:");
            _platoon2.Attack(_platoon1);

            _platoon1.RemoveDeadSoldiers();
            _platoon2.RemoveDeadSoldiers();

            Console.WriteLine("\nСостояние после раунда:");
            _platoon1.PrintStatus();
            _platoon2.PrintStatus();

            round++;
        }

        Console.WriteLine("\n--- Битва завершена ---");

        if (_platoon1.HasAliveSoldiers() && _platoon2.HasAliveSoldiers() == false)
        {
            Console.WriteLine("Победил взвод 1!");
        }
        else if (_platoon2.HasAliveSoldiers() && _platoon1.HasAliveSoldiers() == false)
        {
            Console.WriteLine("Победил взвод 2!");
        }
        else
        {
            Console.WriteLine("Ничья - оба взвода уничтожены!");
        }
    }

    private Platoon CreatePlatoon(int number)
    {
        int minimumRandomSoldierCount = 5;
        int maximumRandomSoldierCount = 11;

        int minimumRandomSoldierType = 1;
        int maximumRandomSoldierType = 5;

        var soldiers = new List<Soldier>();
        int soldierCount = _random.Next(minimumRandomSoldierCount, maximumRandomSoldierCount); 

        for (int i = 0; i < soldierCount; i++)
        {
            int soldierType = _random.Next(minimumRandomSoldierType, maximumRandomSoldierType);
            soldiers.Add(CreateSoldier(soldierType, i + 1));
        }

        return new Platoon(number, soldiers);
    }

    private Soldier CreateSoldier(int type, int id)
    {
        const int SoldierTypeRegular = 1;
        const int SoldierTypeStrong = 2;
        const int SoldierTypeMultiTarget = 3;
        const int SoldierTypeRandomMultiTarget = 4;

        int minimumRandomHealth = 80;
        int maximumRandomHealth = 121;

        int minimumRandomDamage = 10;
        int maximumRandomDamage = 21;

        int minimumRandomArmor = 0;
        int maximumRandomArmor = 11;

        int health = _random.Next(minimumRandomHealth, maximumRandomHealth);
        int damage = _random.Next(minimumRandomDamage, maximumRandomDamage);
        int armor = _random.Next(minimumRandomArmor, maximumRandomArmor);

        switch (type)
        {
            case SoldierTypeRegular:
                return new RegularSoldier(id, health, damage, armor);

            case SoldierTypeStrong:
                return new StrongSoldier(id, health, damage, armor);

            case SoldierTypeMultiTarget:
                return new MultiTargetSoldier(id, health, damage, armor);

            case SoldierTypeRandomMultiTarget:
                return new RandomMultiTargetSoldier(id, health, damage, armor);

            default:
                return new RegularSoldier(id, health, damage, armor);
        }
    }
}

class Platoon
{
    private List<Soldier> _soldiers;
    private int _number;

    public Platoon(int number, List<Soldier> soldiers)
    {
        this._number = number;
        this._soldiers = soldiers;
    }

    public bool HasAliveSoldiers()
    {
        return _soldiers.Any(s => s.IsAlive());
    }

    public void Attack(Platoon enemyPlatoon)
    {
        foreach (var soldier in _soldiers.Where(s => s.IsAlive()))
        {
            soldier.Attack(enemyPlatoon);
        }
    }

    public void RemoveDeadSoldiers()
    {
        _soldiers = _soldiers.Where(Infantryman => Infantryman.IsAlive()).ToList();
    }

    public void PrintStatus()
    {
        Console.WriteLine($"Взвод {_number}: {_soldiers.Count(s => s.IsAlive())} живых солдат");
    }

    public List<Soldier> GetAliveSoldiers()
    {
        return _soldiers.Where(Trooper => Trooper.IsAlive()).ToList();
    }

    public Soldier GetRandomAliveSoldier(Random random)
    {
        var alive = GetAliveSoldiers();

        if (alive.Count == 0) return null;
        return alive[random.Next(alive.Count)];
    }
}

abstract class Soldier
{
    protected Soldier(int id, int health, int damage, int armor)
    {
        Id = id;
        Health = health;
        Damage = damage;
        Armor = armor;
    }

    public int Id { get; }
    public int Health { get; protected set; }
    public int Damage { get; protected set; }
    public int Armor { get; protected set; }

    public bool IsAlive()
    {
        return Health > 0;
    }

    public void TakeDamage(int damage)
    {
        int actualDamage = Math.Max(1, damage - Armor);
        Health -= actualDamage;
    }

    public abstract void Attack(Platoon enemyPlatoon);

    protected virtual void PerformAttack(Soldier target)
    {
        if (target.IsAlive() == false) return;

        Console.WriteLine($"Солдат {Id} атакует солдата {target.Id} и наносит {Damage} урона");
        target.TakeDamage(Damage);

        if (target.IsAlive() == false)
        {
            Console.WriteLine($"Солдат {target.Id} погиб!");
        }
    }
}

class RegularSoldier : Soldier
{
    public RegularSoldier(int id, int health, int damage, int armor)
        : base(id, health, damage, armor) { }

    public override void Attack(Platoon enemyPlatoon)
    {
        var target = enemyPlatoon.GetRandomAliveSoldier(new Random());

        if (target == null) return;

        PerformAttack(target);
    }
}

class StrongSoldier : Soldier
{
    private const double DamageMultiplier = 1.5;

    public StrongSoldier(int id, int health, int damage, int armor)
        : base(id, health, damage, armor) { }

    public override void Attack(Platoon enemyPlatoon)
    {
        var target = enemyPlatoon.GetRandomAliveSoldier(new Random());

        if (target == null) return;

        int multipliedDamage = (int)(Damage * DamageMultiplier);

        Console.WriteLine($"Солдат {Id} атакует солдата {target.Id} с усиленным уроном {multipliedDamage}");

        target.TakeDamage(multipliedDamage);

        if (target.IsAlive() == false)
        {
            Console.WriteLine($"Солдат {target.Id} погиб!");
        }
    }
}

class MultiTargetSoldier : Soldier
{
    private const int MaxTargets = 3;

    public MultiTargetSoldier(int id, int health, int damage, int armor)
        : base(id, health, damage, armor) { }

    public override void Attack(Platoon enemyPlatoon)
    {
        var aliveEnemies = enemyPlatoon.GetAliveSoldiers();

        if (aliveEnemies.Count == 0) return;

        int targetsCount = Math.Min(MaxTargets, aliveEnemies.Count);
        var targets = aliveEnemies.OrderBy(x => Guid.NewGuid()).Take(targetsCount).ToList();

        Console.WriteLine($"Солдат {Id} атакует {targets.Count} целей:");

        foreach (var target in targets)
        {
            PerformAttack(target);
        }
    }
}

class RandomMultiTargetSoldier : Soldier
{
    private const int MaxTargets = 3;

    public RandomMultiTargetSoldier(int id, int health, int damage, int armor)
        : base(id, health, damage, armor) { }

    public override void Attack(Platoon enemyPlatoon)
    {
        var random = new Random();
        var aliveEnemies = enemyPlatoon.GetAliveSoldiers();

        if (aliveEnemies.Count == 0) return;

        int targetsCount = Math.Min(MaxTargets, aliveEnemies.Count);

        Console.WriteLine($"Солдат {Id} атакует {targetsCount} целей:");

        for (int i = 0; i < targetsCount; i++)
        {
            var target = aliveEnemies[random.Next(aliveEnemies.Count)];
            PerformAttack(target);
        }
    }
}
