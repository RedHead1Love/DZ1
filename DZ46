using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main()
    {
        BattleSimulator simulator = new BattleSimulator();
        simulator.RunBattle();
    }
}

static class UserUtils
{
    private static readonly Random _random = new Random();

    public static int GenerateRandomNumber(int min, int max)
    {
        return _random.Next(min, max);
    }
}

class BattleSimulator
{
    private Platoon _platoon1;
    private Platoon _platoon2;
    private readonly List<Soldier> _soldierPrototypes;

    public BattleSimulator()
    {
        _soldierPrototypes = CreateSoldierPrototypes();
        _platoon1 = CreatePlatoon(1);
        _platoon2 = CreatePlatoon(2);
    }

    public void RunBattle()
    {
        int round = 1;

        while (_platoon1.HasAliveSoldiers() && _platoon2.HasAliveSoldiers())
        {
            Console.WriteLine($"\n--- Раунд {round} ---");

            Console.WriteLine("\nАтака взвода 1:");
            _platoon1.Attack(_platoon2.GetAliveSoldiers());

            Console.WriteLine("\nАтака взвода 2:");
            _platoon2.Attack(_platoon1.GetAliveSoldiers());

            _platoon1.RemoveDeadSoldiers();
            _platoon2.RemoveDeadSoldiers();

            Console.WriteLine("\nСостояние после раунда:");
            _platoon1.PrintStatus();
            _platoon2.PrintStatus();

            round++;
        }

        Console.WriteLine("\n--- Битва завершена ---");
        DetermineWinner();
    }

    private void DetermineWinner()
    {
        bool platoon1Alive = _platoon1.HasAliveSoldiers();
        bool platoon2Alive = _platoon2.HasAliveSoldiers();

        if (platoon1Alive && platoon2Alive == false)
        {
            Console.WriteLine("Победил взвод 1!");
        }
        else if (platoon2Alive && platoon1Alive == false)
        {
            Console.WriteLine("Победил взвод 2!");
        }
        else
        {
            Console.WriteLine("Ничья - оба взвода уничтожены!");
        }
    }

    private List<Soldier> CreateSoldierPrototypes()
    {
        return new List<Soldier>
        {
            new RegularSoldier(0, 100, 15, 5),
            new StrongSoldier(0, 120, 12, 8),
            new MultiTargetSoldier(0, 90, 10, 3),
            new RandomMultiTargetSoldier(0, 80, 8, 2)
        };
    }

    private Platoon CreatePlatoon(int number)
    {
        int minimumRandomSoldierCount = 5;
        int maximumRandomSoldierCount = 11;

        var soldiers = new List<Soldier>();
        int soldierCount = UserUtils.GenerateRandomNumber(minimumRandomSoldierCount, maximumRandomSoldierCount);

        for (int i = 0; i < soldierCount; i++)
        {
            int soldierTypeIndex = UserUtils.GenerateRandomNumber(0, _soldierPrototypes.Count);
            Soldier prototype = _soldierPrototypes[soldierTypeIndex];
            Soldier newSoldier = prototype.Clone();
            newSoldier.Id = i + 1;
            soldiers.Add(newSoldier);
        }

        return new Platoon(number, soldiers);
    }
}

class Platoon
{
    private List<Soldier> _soldiers;
    private int _number;

    public Platoon(int number, List<Soldier> soldiers)
    {
        _number = number;
        _soldiers = soldiers;
    }

    public bool HasAliveSoldiers()
    {
        return _soldiers.Any(soldier => soldier.IsAlive());
    }

    public void Attack(List<Soldier> enemySoldiers)
    {
        foreach (var soldier in _soldiers.Where(soldier => soldier.IsAlive()))
        {
            soldier.Attack(enemySoldiers);
        }
    }

    public void RemoveDeadSoldiers()
    {
        _soldiers = _soldiers.Where(soldier => soldier.IsAlive()).ToList();
    }

    public void PrintStatus()
    {
        Console.WriteLine($"Взвод {_number}: {_soldiers.Count(soldier => soldier.IsAlive())} живых солдат");
    }

    public List<Soldier> GetAliveSoldiers()
    {
        return _soldiers.Where(soldier => soldier.IsAlive()).ToList();
    }
}

abstract class Soldier
{
    protected Soldier(int id, int health, int damage, int armor)
    {
        Id = id;
        Health = health;
        Damage = damage;
        Armor = armor;
    }

    public int Id { get; set; }
    public int Health { get; protected set; }
    public int Damage { get; protected set; }
    public int Armor { get; protected set; }

    public bool IsAlive()
    {
        return Health > 0;
    }

    public void TakeDamage(int damage)
    {
        int actualDamage = Math.Max(1, damage - Armor);
        Health -= actualDamage;
    }

    public abstract void Attack(List<Soldier> enemySoldiers);
    public abstract Soldier Clone();

    protected Soldier GetRandomTarget(List<Soldier> enemySoldiers)
    {
        if (enemySoldiers.Count == 0) return null;
        return enemySoldiers[UserUtils.GenerateRandomNumber(0, enemySoldiers.Count)];
    }

    protected virtual void PerformAttack(Soldier target)
    {
        if (target == null || target.IsAlive() == false) return;

        Console.WriteLine($"Солдат {Id} атакует солдата {target.Id} и наносит {Damage} урона");
        target.TakeDamage(Damage);

        if (target.IsAlive() == false)
        {
            Console.WriteLine($"Солдат {target.Id} погиб!");
        }
    }
}

class RegularSoldier : Soldier
{
    public RegularSoldier(int id, int health, int damage, int armor)
        : base(id, health, damage, armor) { }

    public override void Attack(List<Soldier> enemySoldiers)
    {
        var target = GetRandomTarget(enemySoldiers);
        PerformAttack(target);
    }

    public override Soldier Clone()
    {
        return new RegularSoldier(Id, Health, Damage, Armor);
    }
}

class StrongSoldier : Soldier
{
    private const double DamageMultiplier = 1.5;

    public StrongSoldier(int id, int health, int damage, int armor)
        : base(id, health, damage, armor) { }

    public override void Attack(List<Soldier> enemySoldiers)
    {
        var target = GetRandomTarget(enemySoldiers);
        if (target == null) return;

        int multipliedDamage = (int)(Damage * DamageMultiplier);
        Console.WriteLine($"Солдат {Id} атакует солдата {target.Id} с усиленным уроном {multipliedDamage}");

        target.TakeDamage(multipliedDamage);

        if (target.IsAlive() == false)
        {
            Console.WriteLine($"Солдат {target.Id} погиб!");
        }
    }

    public override Soldier Clone()
    {
        return new StrongSoldier(Id, Health, Damage, Armor);
    }
}

class MultiTargetSoldier : Soldier
{
    private const int MaxTargets = 3;

    public MultiTargetSoldier(int id, int health, int damage, int armor)
        : base(id, health, damage, armor) { }

    public override void Attack(List<Soldier> enemySoldiers)
    {
        if (enemySoldiers.Count == 0) return;

        int targetsCount = Math.Min(MaxTargets, enemySoldiers.Count);
        var targets = enemySoldiers.OrderBy(x => Guid.NewGuid()).Take(targetsCount).ToList();

        Console.WriteLine($"Солдат {Id} атакует {targets.Count} целей:");

        foreach (var target in targets)
        {
            PerformAttack(target);
        }
    }

    public override Soldier Clone()
    {
        return new MultiTargetSoldier(Id, Health, Damage, Armor);
    }
}

class RandomMultiTargetSoldier : Soldier
{
    private const int MaxTargets = 3;

    public RandomMultiTargetSoldier(int id, int health, int damage, int armor)
        : base(id, health, damage, armor) { }

    public override void Attack(List<Soldier> enemySoldiers)
    {
        if (enemySoldiers.Count == 0) return;

        int targetsCount = Math.Min(MaxTargets, enemySoldiers.Count);
        Console.WriteLine($"Солдат {Id} атакует {targetsCount} целей:");

        for (int i = 0; i < targetsCount; i++)
        {
            var target = GetRandomTarget(enemySoldiers);
            PerformAttack(target);
        }
    }

    public override Soldier Clone()
    {
        return new RandomMultiTargetSoldier(Id, Health, Damage, Armor);
    }
}
